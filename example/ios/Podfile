# Enable new arch.
ENV['RCT_NEW_ARCH_ENABLED'] = '1'

def node_require(script)
  # Resolve script with node to allow for hoisting
  require Pod::Executable.execute_command('node', ['-p',
    "require.resolve(
      '#{script}',
      {paths: [process.argv[1]]},
    )", __dir__]).strip
end

node_require('react-native/scripts/react_native_pods.rb')
node_require('react-native-permissions/scripts/setup.rb')

platform :ios, "16.0"
prepare_react_native_project!

setup_permissions([
  'LocationAccuracy',
  'LocationAlways',
  'LocationWhenInUse',
  'Notifications',
])

linkage = ENV['USE_FRAMEWORKS']
if linkage
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

config = use_native_modules!

def shared_example_target_config(name, config)
  target name do
    use_react_native!(
      :path => config[:reactNativePath],
    # An absolute path to your application root.
      :app_path => "#{Pod::Config.instance.installation_root}/..",
    )

    pod 'RNPermissions', :path => '../node_modules/react-native-permissions'
    pod 'react-native-navigation-sdk', :path => '../..'

    unless name.end_with?("CarPlay")
      setup_permissions([
        'LocationAccuracy',
        'LocationAlways',
        'LocationWhenInUse',
        'Notifications',
      ])
    end
  end
end

shared_example_target_config('ReactNativeNavigationSdkExample', config)
shared_example_target_config('ReactNativeNavigationSdkExampleCarPlay', config)

target 'ReactNativeNavigationSdkExampleTests' do
  # Test target that inherits from the app
  inherit! :complete
end

# Run Codegen during development for the example app.
pre_install do |installer|
  system("cd ../../ && npx bob build --target codegen")
end

post_install do |installer|
  # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
  react_native_post_install(
    installer,
    config[:reactNativePath],
    :mac_catalyst_enabled => false,
    # :ccache_enabled => true
  )
end
