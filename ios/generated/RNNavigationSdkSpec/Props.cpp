// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * This code was generated by
 * [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be
 * lost once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include "Props.h"
#include <folly/dynamic.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

NavViewProps::NavViewProps(const PropsParserContext &context,
                           const NavViewProps &sourceProps,
                           const RawProps &rawProps)
    : ViewProps(context, sourceProps, rawProps),

      viewType(convertRawProp(context, rawProps, "viewType",
                              sourceProps.viewType, {0})),
      nativeID(convertRawProp(context, rawProps, "nativeID",
                              sourceProps.nativeID, {})),
      mapId(convertRawProp(context, rawProps, "mapId", sourceProps.mapId, {})),
      mapType(convertRawProp(context, rawProps, "mapType", sourceProps.mapType,
                             {1})),
      mapPadding(convertRawProp(context, rawProps, "mapPadding",
                                sourceProps.mapPadding, {})),
      navigationUIEnabled(convertRawProp(context, rawProps,
                                         "navigationUIEnabled",
                                         sourceProps.navigationUIEnabled, {})),
      tripProgressBarEnabled(
          convertRawProp(context, rawProps, "tripProgressBarEnabled",
                         sourceProps.tripProgressBarEnabled, {false})),
      trafficIncidentCardsEnabled(
          convertRawProp(context, rawProps, "trafficIncidentCardsEnabled",
                         sourceProps.trafficIncidentCardsEnabled, {true})),
      headerEnabled(convertRawProp(context, rawProps, "headerEnabled",
                                   sourceProps.headerEnabled, {true})),
      footerEnabled(convertRawProp(context, rawProps, "footerEnabled",
                                   sourceProps.footerEnabled, {true})),
      speedometerEnabled(convertRawProp(context, rawProps, "speedometerEnabled",
                                        sourceProps.speedometerEnabled,
                                        {true})),
      speedLimitIconEnabled(
          convertRawProp(context, rawProps, "speedLimitIconEnabled",
                         sourceProps.speedLimitIconEnabled, {true})),
      recenterButtonEnabled(
          convertRawProp(context, rawProps, "recenterButtonEnabled",
                         sourceProps.recenterButtonEnabled, {true})),
      navigationViewStylingOptions(
          convertRawProp(context, rawProps, "navigationViewStylingOptions",
                         sourceProps.navigationViewStylingOptions, {})),
      nightMode(convertRawProp(context, rawProps, "nightMode",
                               sourceProps.nightMode, {0})),
      followingPerspective(
          convertRawProp(context, rawProps, "followingPerspective",
                         sourceProps.followingPerspective, {0})),
      mapStyle(convertRawProp(context, rawProps, "mapStyle",
                              sourceProps.mapStyle, {})),
      mapToolbarEnabled(convertRawProp(context, rawProps, "mapToolbarEnabled",
                                       sourceProps.mapToolbarEnabled, {true})),
      indoorEnabled(convertRawProp(context, rawProps, "indoorEnabled",
                                   sourceProps.indoorEnabled, {true})),
      trafficEnabled(convertRawProp(context, rawProps, "trafficEnabled",
                                    sourceProps.trafficEnabled, {false})),
      compassEnabled(convertRawProp(context, rawProps, "compassEnabled",
                                    sourceProps.compassEnabled, {true})),
      myLocationButtonEnabled(
          convertRawProp(context, rawProps, "myLocationButtonEnabled",
                         sourceProps.myLocationButtonEnabled, {true})),
      myLocationEnabled(convertRawProp(context, rawProps, "myLocationEnabled",
                                       sourceProps.myLocationEnabled, {false})),
      rotateGesturesEnabled(
          convertRawProp(context, rawProps, "rotateGesturesEnabled",
                         sourceProps.rotateGesturesEnabled, {true})),
      scrollGesturesEnabled(
          convertRawProp(context, rawProps, "scrollGesturesEnabled",
                         sourceProps.scrollGesturesEnabled, {true})),
      scrollGesturesEnabledDuringRotateOrZoom(convertRawProp(
          context, rawProps, "scrollGesturesEnabledDuringRotateOrZoom",
          sourceProps.scrollGesturesEnabledDuringRotateOrZoom, {true})),
      tiltGesturesEnabled(
          convertRawProp(context, rawProps, "tiltGesturesEnabled",
                         sourceProps.tiltGesturesEnabled, {true})),
      zoomControlsEnabled(
          convertRawProp(context, rawProps, "zoomControlsEnabled",
                         sourceProps.zoomControlsEnabled, {true})),
      zoomGesturesEnabled(
          convertRawProp(context, rawProps, "zoomGesturesEnabled",
                         sourceProps.zoomGesturesEnabled, {true})),
      buildingsEnabled(convertRawProp(context, rawProps, "buildingsEnabled",
                                      sourceProps.buildingsEnabled, {true})),
      reportIncidentButtonEnabled(
          convertRawProp(context, rawProps, "reportIncidentButtonEnabled",
                         sourceProps.reportIncidentButtonEnabled, {true})),
      minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel",
                                  sourceProps.minZoomLevel, {})),
      maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel",
                                  sourceProps.maxZoomLevel, {})),
      initialCameraPosition(
          convertRawProp(context, rawProps, "initialCameraPosition",
                         sourceProps.initialCameraPosition, {})) {}

} // namespace facebook::react
