/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This code was generated by
 * [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of RNNavigationSdkSpec symbols
#ifndef RNNavigationSdkSpec_H
#define RNNavigationSdkSpec_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>

NS_ASSUME_NONNULL_BEGIN
namespace JS {
namespace NativeNavAutoModule {
struct CircleOptionsSpecCenter {
  double lat() const;
  double lng() const;

  CircleOptionsSpecCenter(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavAutoModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavAutoModule_CircleOptionsSpecCenter)
+ (RCTManagedPointer *)JS_NativeNavAutoModule_CircleOptionsSpecCenter:(id)json;
@end
namespace JS {
namespace NativeNavAutoModule {
struct CircleOptionsSpec {
  JS::NativeNavAutoModule::CircleOptionsSpecCenter center() const;
  NSString *id_() const;
  double radius() const;
  std::optional<double> strokeWidth() const;
  NSString *strokeColor() const;
  NSString *fillColor() const;
  std::optional<bool> clickable() const;
  std::optional<bool> visible() const;
  std::optional<double> zIndex() const;

  CircleOptionsSpec(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavAutoModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavAutoModule_CircleOptionsSpec)
+ (RCTManagedPointer *)JS_NativeNavAutoModule_CircleOptionsSpec:(id)json;
@end
namespace JS {
namespace NativeNavAutoModule {
struct MarkerOptionsSpecPosition {
  double lat() const;
  double lng() const;

  MarkerOptionsSpecPosition(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavAutoModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavAutoModule_MarkerOptionsSpecPosition)
+ (RCTManagedPointer *)JS_NativeNavAutoModule_MarkerOptionsSpecPosition:(id)json;
@end
namespace JS {
namespace NativeNavAutoModule {
struct MarkerOptionsSpec {
  JS::NativeNavAutoModule::MarkerOptionsSpecPosition position() const;
  NSString *id_() const;
  NSString *imgPath() const;
  NSString *title() const;
  NSString *snippet() const;
  std::optional<double> alpha() const;
  std::optional<double> rotation() const;
  std::optional<bool> draggable() const;
  std::optional<bool> flat() const;
  std::optional<bool> visible() const;
  std::optional<double> zIndex() const;

  MarkerOptionsSpec(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavAutoModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavAutoModule_MarkerOptionsSpec)
+ (RCTManagedPointer *)JS_NativeNavAutoModule_MarkerOptionsSpec:(id)json;
@end
namespace JS {
namespace NativeNavAutoModule {
struct PolylineOptionsSpecPointsElement {
  double lat() const;
  double lng() const;

  PolylineOptionsSpecPointsElement(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavAutoModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavAutoModule_PolylineOptionsSpecPointsElement)
+ (RCTManagedPointer *)JS_NativeNavAutoModule_PolylineOptionsSpecPointsElement:(id)json;
@end
namespace JS {
namespace NativeNavAutoModule {
struct PolylineOptionsSpec {
  facebook::react::LazyVector<JS::NativeNavAutoModule::PolylineOptionsSpecPointsElement> points()
      const;
  NSString *id_() const;
  NSString *color() const;
  std::optional<double> width() const;
  std::optional<bool> clickable() const;
  std::optional<bool> visible() const;
  std::optional<double> zIndex() const;

  PolylineOptionsSpec(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavAutoModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavAutoModule_PolylineOptionsSpec)
+ (RCTManagedPointer *)JS_NativeNavAutoModule_PolylineOptionsSpec:(id)json;
@end
namespace JS {
namespace NativeNavAutoModule {
struct PolygonOptionsSpecPointsElement {
  double lat() const;
  double lng() const;

  PolygonOptionsSpecPointsElement(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavAutoModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavAutoModule_PolygonOptionsSpecPointsElement)
+ (RCTManagedPointer *)JS_NativeNavAutoModule_PolygonOptionsSpecPointsElement:(id)json;
@end
namespace JS {
namespace NativeNavAutoModule {
struct PolygonOptionsSpecHolesElementElement {
  double lat() const;
  double lng() const;

  PolygonOptionsSpecHolesElementElement(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavAutoModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavAutoModule_PolygonOptionsSpecHolesElementElement)
+ (RCTManagedPointer *)JS_NativeNavAutoModule_PolygonOptionsSpecHolesElementElement:(id)json;
@end
namespace JS {
namespace NativeNavAutoModule {
struct PolygonOptionsSpec {
  facebook::react::LazyVector<JS::NativeNavAutoModule::PolygonOptionsSpecPointsElement> points()
      const;
  NSString *id_() const;
  facebook::react::LazyVector<
      facebook::react::LazyVector<JS::NativeNavAutoModule::PolygonOptionsSpecHolesElementElement>>
  holes() const;
  std::optional<double> strokeWidth() const;
  NSString *strokeColor() const;
  NSString *fillColor() const;
  std::optional<bool> geodesic() const;
  std::optional<bool> clickable() const;
  std::optional<bool> visible() const;
  std::optional<double> zIndex() const;

  PolygonOptionsSpec(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavAutoModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavAutoModule_PolygonOptionsSpec)
+ (RCTManagedPointer *)JS_NativeNavAutoModule_PolygonOptionsSpec:(id)json;
@end
namespace JS {
namespace NativeNavAutoModule {
struct SpecAddGroundOverlayOptions {
  SpecAddGroundOverlayOptions(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavAutoModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavAutoModule_SpecAddGroundOverlayOptions)
+ (RCTManagedPointer *)JS_NativeNavAutoModule_SpecAddGroundOverlayOptions:(id)json;
@end
namespace JS {
namespace NativeNavAutoModule {
struct CameraPositionSpecTarget {
  double lat() const;
  double lng() const;

  CameraPositionSpecTarget(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavAutoModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavAutoModule_CameraPositionSpecTarget)
+ (RCTManagedPointer *)JS_NativeNavAutoModule_CameraPositionSpecTarget:(id)json;
@end
namespace JS {
namespace NativeNavAutoModule {
struct CameraPositionSpec {
  std::optional<JS::NativeNavAutoModule::CameraPositionSpecTarget> target() const;
  std::optional<double> bearing() const;
  std::optional<double> tilt() const;
  std::optional<double> zoom() const;

  CameraPositionSpec(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavAutoModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavAutoModule_CameraPositionSpec)
+ (RCTManagedPointer *)JS_NativeNavAutoModule_CameraPositionSpec:(id)json;
@end
@protocol NativeNavAutoModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)isAutoScreenAvailable:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject;
- (void)setMapType:(double)mapType;
- (void)setMapStyle:(NSString *)mapStyle;
- (void)clearMapView:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject;
- (void)addCircle:(JS::NativeNavAutoModule::CircleOptionsSpec &)options
          resolve:(RCTPromiseResolveBlock)resolve
           reject:(RCTPromiseRejectBlock)reject;
- (void)addMarker:(JS::NativeNavAutoModule::MarkerOptionsSpec &)options
          resolve:(RCTPromiseResolveBlock)resolve
           reject:(RCTPromiseRejectBlock)reject;
- (void)addPolyline:(JS::NativeNavAutoModule::PolylineOptionsSpec &)options
            resolve:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject;
- (void)addPolygon:(JS::NativeNavAutoModule::PolygonOptionsSpec &)options
           resolve:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject;
- (void)addGroundOverlay:(JS::NativeNavAutoModule::SpecAddGroundOverlayOptions &)options
                 resolve:(RCTPromiseResolveBlock)resolve
                  reject:(RCTPromiseRejectBlock)reject;
- (void)moveCamera:(JS::NativeNavAutoModule::CameraPositionSpec &)cameraPosition
           resolve:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject;
- (void)removeMarker:(NSString *)id
             resolve:(RCTPromiseResolveBlock)resolve
              reject:(RCTPromiseRejectBlock)reject;
- (void)removePolyline:(NSString *)id
               resolve:(RCTPromiseResolveBlock)resolve
                reject:(RCTPromiseRejectBlock)reject;
- (void)removePolygon:(NSString *)id
              resolve:(RCTPromiseResolveBlock)resolve
               reject:(RCTPromiseRejectBlock)reject;
- (void)removeCircle:(NSString *)id
             resolve:(RCTPromiseResolveBlock)resolve
              reject:(RCTPromiseRejectBlock)reject;
- (void)removeGroundOverlay:(NSString *)id
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)setIndoorEnabled:(BOOL)isOn;
- (void)setTrafficEnabled:(BOOL)isOn;
- (void)setCompassEnabled:(BOOL)isOn;
- (void)setMyLocationEnabled:(BOOL)isOn;
- (void)setBuildingsEnabled:(BOOL)isOn;
- (void)setZoomLevel:(double)zoomLevel
             resolve:(RCTPromiseResolveBlock)resolve
              reject:(RCTPromiseRejectBlock)reject;
- (void)setMapPadding:(double)top left:(double)left bottom:(double)bottom right:(double)right;
- (void)getCameraPosition:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject;
- (void)getMyLocation:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject;
- (void)getUiSettings:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject;
- (void)isMyLocationEnabled:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject;

@end

@interface NativeNavAutoModuleSpecBase : NSObject {
 @protected
  facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;

- (void)emitOnAutoScreenAvailabilityChanged:(BOOL)value;
- (void)emitOnCustomNavigationAutoEvent:(NSDictionary *)value;
@end

namespace facebook::react {
/**
 * ObjC++ class for module 'NativeNavAutoModule'
 */
class JSI_EXPORT NativeNavAutoModuleSpecJSI : public ObjCTurboModule {
 public:
  NativeNavAutoModuleSpecJSI(const ObjCTurboModule::InitParams &params);
};
}  // namespace facebook::react
namespace JS {
namespace NativeNavModule {
struct TOSDialogOptionsSpec {
  NSString *title() const;
  NSString *companyName() const;
  std::optional<bool> showOnlyDisclaimer() const;

  TOSDialogOptionsSpec(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavModule_TOSDialogOptionsSpec)
+ (RCTManagedPointer *)JS_NativeNavModule_TOSDialogOptionsSpec:(id)json;
@end
namespace JS {
namespace NativeNavModule {
struct RoutingOptionsSpec {
  std::optional<double> travelMode() const;
  std::optional<double> routingStrategy() const;
  std::optional<double> alternateRoutesStrategy() const;
  std::optional<bool> avoidFerries() const;
  std::optional<bool> avoidTolls() const;
  std::optional<bool> avoidHighways() const;

  RoutingOptionsSpec(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavModule_RoutingOptionsSpec)
+ (RCTManagedPointer *)JS_NativeNavModule_RoutingOptionsSpec:(id)json;
@end
namespace JS {
namespace NativeNavModule {
struct DisplayOptionsSpec {
  std::optional<bool> showDestinationMarkers() const;
  std::optional<bool> showStopSigns() const;
  std::optional<bool> showTrafficLights() const;

  DisplayOptionsSpec(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavModule_DisplayOptionsSpec)
+ (RCTManagedPointer *)JS_NativeNavModule_DisplayOptionsSpec:(id)json;
@end
namespace JS {
namespace NativeNavModule {
struct SpeedAlertOptionsSpec {
  double majorSpeedAlertPercentThreshold() const;
  double minorSpeedAlertPercentThreshold() const;
  double severityUpgradeDurationSeconds() const;

  SpeedAlertOptionsSpec(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavModule_SpeedAlertOptionsSpec)
+ (RCTManagedPointer *)JS_NativeNavModule_SpeedAlertOptionsSpec:(id)json;
@end
namespace JS {
namespace NativeNavModule {
struct LatLngSpec {
  double lat() const;
  double lng() const;

  LatLngSpec(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavModule_LatLngSpec)
+ (RCTManagedPointer *)JS_NativeNavModule_LatLngSpec:(id)json;
@end
namespace JS {
namespace NativeNavModule {
struct LocationSimulationOptionsSpec {
  double speedMultiplier() const;

  LocationSimulationOptionsSpec(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavModule_LocationSimulationOptionsSpec)
+ (RCTManagedPointer *)JS_NativeNavModule_LocationSimulationOptionsSpec:(id)json;
@end
@protocol NativeNavModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)initializeNavigator:
            (JS::NativeNavModule::TOSDialogOptionsSpec &)termsAndConditionsDialogOptions
        taskRemovedBehavior:(double)taskRemovedBehavior
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)cleanup:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject;
- (void)setDestinations:(NSArray *)waypoints
         routingOptions:(JS::NativeNavModule::RoutingOptionsSpec &)routingOptions
         displayOptions:(JS::NativeNavModule::DisplayOptionsSpec &)displayOptions
                resolve:(RCTPromiseResolveBlock)resolve
                 reject:(RCTPromiseRejectBlock)reject;
- (void)continueToNextDestination:(RCTPromiseResolveBlock)resolve
                           reject:(RCTPromiseRejectBlock)reject;
- (void)clearDestinations:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject;
- (void)startGuidance:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject;
- (void)stopGuidance:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject;
- (void)setSpeedAlertOptions:(JS::NativeNavModule::SpeedAlertOptionsSpec &)alertOptions
                     resolve:(RCTPromiseResolveBlock)resolve
                      reject:(RCTPromiseRejectBlock)reject;
- (void)setAbnormalTerminatingReportingEnabled:(BOOL)enabled;
- (void)setAudioGuidanceType:(double)index
                     resolve:(RCTPromiseResolveBlock)resolve
                      reject:(RCTPromiseRejectBlock)reject;
- (void)setBackgroundLocationUpdatesEnabled:(BOOL)isEnabled;
- (void)setTurnByTurnLoggingEnabled:(BOOL)isEnabled;
- (void)areTermsAccepted:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject;
- (void)getCurrentRouteSegment:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject;
- (void)getRouteSegments:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject;
- (void)getCurrentTimeAndDistance:(RCTPromiseResolveBlock)resolve
                           reject:(RCTPromiseRejectBlock)reject;
- (void)getTraveledPath:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject;
- (void)getNavSDKVersion:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject;
- (void)stopUpdatingLocation:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject;
- (void)startUpdatingLocation:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject;
- (void)simulateLocation:(JS::NativeNavModule::LatLngSpec &)location
                 resolve:(RCTPromiseResolveBlock)resolve
                  reject:(RCTPromiseRejectBlock)reject;
- (void)resumeLocationSimulation:(RCTPromiseResolveBlock)resolve
                          reject:(RCTPromiseRejectBlock)reject;
- (void)pauseLocationSimulation:(RCTPromiseResolveBlock)resolve
                         reject:(RCTPromiseRejectBlock)reject;
- (void)simulateLocationsAlongExistingRoute:
            (JS::NativeNavModule::LocationSimulationOptionsSpec &)options
                                    resolve:(RCTPromiseResolveBlock)resolve
                                     reject:(RCTPromiseRejectBlock)reject;
- (void)stopLocationSimulation:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject;
- (void)resetTermsAccepted;

@end

@interface NativeNavModuleSpecBase : NSObject {
 @protected
  facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;

- (void)emitOnNavigationReady;
- (void)emitOnLocationChanged:(NSDictionary *)value;
- (void)emitOnArrival:(NSDictionary *)value;
- (void)emitOnRemainingTimeOrDistanceChanged;
- (void)emitOnRouteChanged;
- (void)emitOnReroutingRequestedByOffRoute;
- (void)emitOnStartGuidance;
- (void)emitOnTurnByTurn:(NSDictionary *)value;
- (void)emitOnRawLocationChanged:(NSDictionary *)value;
- (void)emitOnTrafficUpdated;
- (void)emitLogDebugInfo:(NSDictionary *)value;
@end

namespace facebook::react {
/**
 * ObjC++ class for module 'NativeNavModule'
 */
class JSI_EXPORT NativeNavModuleSpecJSI : public ObjCTurboModule {
 public:
  NativeNavModuleSpecJSI(const ObjCTurboModule::InitParams &params);
};
}  // namespace facebook::react
namespace JS {
namespace NativeNavViewModule {
struct CircleOptionsSpecCenter {
  double lat() const;
  double lng() const;

  CircleOptionsSpecCenter(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavViewModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavViewModule_CircleOptionsSpecCenter)
+ (RCTManagedPointer *)JS_NativeNavViewModule_CircleOptionsSpecCenter:(id)json;
@end
namespace JS {
namespace NativeNavViewModule {
struct CircleOptionsSpec {
  JS::NativeNavViewModule::CircleOptionsSpecCenter center() const;
  NSString *id_() const;
  double radius() const;
  std::optional<double> strokeWidth() const;
  NSString *strokeColor() const;
  NSString *fillColor() const;
  std::optional<bool> clickable() const;
  std::optional<bool> visible() const;
  std::optional<double> zIndex() const;

  CircleOptionsSpec(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavViewModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavViewModule_CircleOptionsSpec)
+ (RCTManagedPointer *)JS_NativeNavViewModule_CircleOptionsSpec:(id)json;
@end
namespace JS {
namespace NativeNavViewModule {
struct MarkerOptionsSpecPosition {
  double lat() const;
  double lng() const;

  MarkerOptionsSpecPosition(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavViewModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavViewModule_MarkerOptionsSpecPosition)
+ (RCTManagedPointer *)JS_NativeNavViewModule_MarkerOptionsSpecPosition:(id)json;
@end
namespace JS {
namespace NativeNavViewModule {
struct MarkerOptionsSpec {
  JS::NativeNavViewModule::MarkerOptionsSpecPosition position() const;
  NSString *id_() const;
  NSString *imgPath() const;
  NSString *title() const;
  NSString *snippet() const;
  std::optional<double> alpha() const;
  std::optional<double> rotation() const;
  std::optional<bool> draggable() const;
  std::optional<bool> flat() const;
  std::optional<bool> visible() const;
  std::optional<double> zIndex() const;

  MarkerOptionsSpec(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavViewModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavViewModule_MarkerOptionsSpec)
+ (RCTManagedPointer *)JS_NativeNavViewModule_MarkerOptionsSpec:(id)json;
@end
namespace JS {
namespace NativeNavViewModule {
struct PolylineOptionsSpecPointsElement {
  double lat() const;
  double lng() const;

  PolylineOptionsSpecPointsElement(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavViewModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavViewModule_PolylineOptionsSpecPointsElement)
+ (RCTManagedPointer *)JS_NativeNavViewModule_PolylineOptionsSpecPointsElement:(id)json;
@end
namespace JS {
namespace NativeNavViewModule {
struct PolylineOptionsSpec {
  facebook::react::LazyVector<JS::NativeNavViewModule::PolylineOptionsSpecPointsElement> points()
      const;
  NSString *id_() const;
  NSString *color() const;
  std::optional<double> width() const;
  std::optional<bool> clickable() const;
  std::optional<bool> visible() const;
  std::optional<double> zIndex() const;

  PolylineOptionsSpec(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavViewModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavViewModule_PolylineOptionsSpec)
+ (RCTManagedPointer *)JS_NativeNavViewModule_PolylineOptionsSpec:(id)json;
@end
namespace JS {
namespace NativeNavViewModule {
struct PolygonOptionsSpecPointsElement {
  double lat() const;
  double lng() const;

  PolygonOptionsSpecPointsElement(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavViewModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavViewModule_PolygonOptionsSpecPointsElement)
+ (RCTManagedPointer *)JS_NativeNavViewModule_PolygonOptionsSpecPointsElement:(id)json;
@end
namespace JS {
namespace NativeNavViewModule {
struct PolygonOptionsSpecHolesElementElement {
  double lat() const;
  double lng() const;

  PolygonOptionsSpecHolesElementElement(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavViewModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavViewModule_PolygonOptionsSpecHolesElementElement)
+ (RCTManagedPointer *)JS_NativeNavViewModule_PolygonOptionsSpecHolesElementElement:(id)json;
@end
namespace JS {
namespace NativeNavViewModule {
struct PolygonOptionsSpec {
  facebook::react::LazyVector<JS::NativeNavViewModule::PolygonOptionsSpecPointsElement> points()
      const;
  NSString *id_() const;
  facebook::react::LazyVector<
      facebook::react::LazyVector<JS::NativeNavViewModule::PolygonOptionsSpecHolesElementElement>>
  holes() const;
  std::optional<double> strokeWidth() const;
  NSString *strokeColor() const;
  NSString *fillColor() const;
  std::optional<bool> geodesic() const;
  std::optional<bool> clickable() const;
  std::optional<bool> visible() const;
  std::optional<double> zIndex() const;

  PolygonOptionsSpec(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavViewModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavViewModule_PolygonOptionsSpec)
+ (RCTManagedPointer *)JS_NativeNavViewModule_PolygonOptionsSpec:(id)json;
@end
namespace JS {
namespace NativeNavViewModule {
struct SpecAddGroundOverlayOptions {
  SpecAddGroundOverlayOptions(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavViewModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavViewModule_SpecAddGroundOverlayOptions)
+ (RCTManagedPointer *)JS_NativeNavViewModule_SpecAddGroundOverlayOptions:(id)json;
@end
namespace JS {
namespace NativeNavViewModule {
struct CameraPositionSpecTarget {
  double lat() const;
  double lng() const;

  CameraPositionSpecTarget(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavViewModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavViewModule_CameraPositionSpecTarget)
+ (RCTManagedPointer *)JS_NativeNavViewModule_CameraPositionSpecTarget:(id)json;
@end
namespace JS {
namespace NativeNavViewModule {
struct CameraPositionSpec {
  std::optional<JS::NativeNavViewModule::CameraPositionSpecTarget> target() const;
  std::optional<double> bearing() const;
  std::optional<double> tilt() const;
  std::optional<double> zoom() const;

  CameraPositionSpec(NSDictionary *const v) : _v(v) {}

 private:
  NSDictionary *_v;
};
}  // namespace NativeNavViewModule
}  // namespace JS

@interface RCTCxxConvert (NativeNavViewModule_CameraPositionSpec)
+ (RCTManagedPointer *)JS_NativeNavViewModule_CameraPositionSpec:(id)json;
@end
@protocol NativeNavViewModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)addCircle:(double)viewId
          options:(JS::NativeNavViewModule::CircleOptionsSpec &)options
          resolve:(RCTPromiseResolveBlock)resolve
           reject:(RCTPromiseRejectBlock)reject;
- (void)addMarker:(double)viewId
          options:(JS::NativeNavViewModule::MarkerOptionsSpec &)options
          resolve:(RCTPromiseResolveBlock)resolve
           reject:(RCTPromiseRejectBlock)reject;
- (void)addPolyline:(double)viewId
            options:(JS::NativeNavViewModule::PolylineOptionsSpec &)options
            resolve:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject;
- (void)addPolygon:(double)viewId
           options:(JS::NativeNavViewModule::PolygonOptionsSpec &)options
           resolve:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject;
- (void)addGroundOverlay:(double)viewId
                 options:(JS::NativeNavViewModule::SpecAddGroundOverlayOptions &)options
                 resolve:(RCTPromiseResolveBlock)resolve
                  reject:(RCTPromiseRejectBlock)reject;
- (void)moveCamera:(double)viewId
    cameraPosition:(JS::NativeNavViewModule::CameraPositionSpec &)cameraPosition
           resolve:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject;
- (void)getCameraPosition:(double)viewId
                  resolve:(RCTPromiseResolveBlock)resolve
                   reject:(RCTPromiseRejectBlock)reject;
- (void)getMyLocation:(double)viewId
              resolve:(RCTPromiseResolveBlock)resolve
               reject:(RCTPromiseRejectBlock)reject;
- (void)getUiSettings:(double)viewId
              resolve:(RCTPromiseResolveBlock)resolve
               reject:(RCTPromiseRejectBlock)reject;
- (void)isMyLocationEnabled:(double)viewId
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)showRouteOverview:(double)viewId
                  resolve:(RCTPromiseResolveBlock)resolve
                   reject:(RCTPromiseRejectBlock)reject;
- (void)clearMapView:(double)viewId
             resolve:(RCTPromiseResolveBlock)resolve
              reject:(RCTPromiseRejectBlock)reject;
- (void)removeMarker:(double)viewId
                  id:(NSString *)id
             resolve:(RCTPromiseResolveBlock)resolve
              reject:(RCTPromiseRejectBlock)reject;
- (void)removePolyline:(double)viewId
                    id:(NSString *)id
               resolve:(RCTPromiseResolveBlock)resolve
                reject:(RCTPromiseRejectBlock)reject;
- (void)removePolygon:(double)viewId
                   id:(NSString *)id
              resolve:(RCTPromiseResolveBlock)resolve
               reject:(RCTPromiseRejectBlock)reject;
- (void)removeCircle:(double)viewId
                  id:(NSString *)id
             resolve:(RCTPromiseResolveBlock)resolve
              reject:(RCTPromiseRejectBlock)reject;
- (void)removeGroundOverlay:(double)viewId
                         id:(NSString *)id
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)setZoomLevel:(double)viewId
               level:(double)level
             resolve:(RCTPromiseResolveBlock)resolve
              reject:(RCTPromiseRejectBlock)reject;

@end

@interface NativeNavViewModuleSpecBase : NSObject {
 @protected
  facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;

@end

namespace facebook::react {
/**
 * ObjC++ class for module 'NativeNavViewModule'
 */
class JSI_EXPORT NativeNavViewModuleSpecJSI : public ObjCTurboModule {
 public:
  NativeNavViewModuleSpecJSI(const ObjCTurboModule::InitParams &params);
};
}  // namespace facebook::react
inline double JS::NativeNavAutoModule::CircleOptionsSpecCenter::lat() const {
  id const p = _v[@"lat"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavAutoModule::CircleOptionsSpecCenter::lng() const {
  id const p = _v[@"lng"];
  return RCTBridgingToDouble(p);
}
inline JS::NativeNavAutoModule::CircleOptionsSpecCenter
JS::NativeNavAutoModule::CircleOptionsSpec::center() const {
  id const p = _v[@"center"];
  return JS::NativeNavAutoModule::CircleOptionsSpecCenter(p);
}
inline NSString *JS::NativeNavAutoModule::CircleOptionsSpec::id_() const {
  id const p = _v[@"id"];
  return RCTBridgingToOptionalString(p);
}
inline double JS::NativeNavAutoModule::CircleOptionsSpec::radius() const {
  id const p = _v[@"radius"];
  return RCTBridgingToDouble(p);
}
inline std::optional<double> JS::NativeNavAutoModule::CircleOptionsSpec::strokeWidth() const {
  id const p = _v[@"strokeWidth"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeNavAutoModule::CircleOptionsSpec::strokeColor() const {
  id const p = _v[@"strokeColor"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeNavAutoModule::CircleOptionsSpec::fillColor() const {
  id const p = _v[@"fillColor"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<bool> JS::NativeNavAutoModule::CircleOptionsSpec::clickable() const {
  id const p = _v[@"clickable"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeNavAutoModule::CircleOptionsSpec::visible() const {
  id const p = _v[@"visible"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<double> JS::NativeNavAutoModule::CircleOptionsSpec::zIndex() const {
  id const p = _v[@"zIndex"];
  return RCTBridgingToOptionalDouble(p);
}
inline double JS::NativeNavAutoModule::MarkerOptionsSpecPosition::lat() const {
  id const p = _v[@"lat"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavAutoModule::MarkerOptionsSpecPosition::lng() const {
  id const p = _v[@"lng"];
  return RCTBridgingToDouble(p);
}
inline JS::NativeNavAutoModule::MarkerOptionsSpecPosition
JS::NativeNavAutoModule::MarkerOptionsSpec::position() const {
  id const p = _v[@"position"];
  return JS::NativeNavAutoModule::MarkerOptionsSpecPosition(p);
}
inline NSString *JS::NativeNavAutoModule::MarkerOptionsSpec::id_() const {
  id const p = _v[@"id"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeNavAutoModule::MarkerOptionsSpec::imgPath() const {
  id const p = _v[@"imgPath"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeNavAutoModule::MarkerOptionsSpec::title() const {
  id const p = _v[@"title"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeNavAutoModule::MarkerOptionsSpec::snippet() const {
  id const p = _v[@"snippet"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<double> JS::NativeNavAutoModule::MarkerOptionsSpec::alpha() const {
  id const p = _v[@"alpha"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeNavAutoModule::MarkerOptionsSpec::rotation() const {
  id const p = _v[@"rotation"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<bool> JS::NativeNavAutoModule::MarkerOptionsSpec::draggable() const {
  id const p = _v[@"draggable"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeNavAutoModule::MarkerOptionsSpec::flat() const {
  id const p = _v[@"flat"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeNavAutoModule::MarkerOptionsSpec::visible() const {
  id const p = _v[@"visible"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<double> JS::NativeNavAutoModule::MarkerOptionsSpec::zIndex() const {
  id const p = _v[@"zIndex"];
  return RCTBridgingToOptionalDouble(p);
}
inline double JS::NativeNavAutoModule::PolylineOptionsSpecPointsElement::lat() const {
  id const p = _v[@"lat"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavAutoModule::PolylineOptionsSpecPointsElement::lng() const {
  id const p = _v[@"lng"];
  return RCTBridgingToDouble(p);
}
inline facebook::react::LazyVector<JS::NativeNavAutoModule::PolylineOptionsSpecPointsElement>
JS::NativeNavAutoModule::PolylineOptionsSpec::points() const {
  id const p = _v[@"points"];
  return RCTBridgingToVec(
      p, ^JS::NativeNavAutoModule::PolylineOptionsSpecPointsElement(id itemValue_0) {
        return JS::NativeNavAutoModule::PolylineOptionsSpecPointsElement(itemValue_0);
      });
}
inline NSString *JS::NativeNavAutoModule::PolylineOptionsSpec::id_() const {
  id const p = _v[@"id"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeNavAutoModule::PolylineOptionsSpec::color() const {
  id const p = _v[@"color"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<double> JS::NativeNavAutoModule::PolylineOptionsSpec::width() const {
  id const p = _v[@"width"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<bool> JS::NativeNavAutoModule::PolylineOptionsSpec::clickable() const {
  id const p = _v[@"clickable"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeNavAutoModule::PolylineOptionsSpec::visible() const {
  id const p = _v[@"visible"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<double> JS::NativeNavAutoModule::PolylineOptionsSpec::zIndex() const {
  id const p = _v[@"zIndex"];
  return RCTBridgingToOptionalDouble(p);
}
inline double JS::NativeNavAutoModule::PolygonOptionsSpecPointsElement::lat() const {
  id const p = _v[@"lat"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavAutoModule::PolygonOptionsSpecPointsElement::lng() const {
  id const p = _v[@"lng"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavAutoModule::PolygonOptionsSpecHolesElementElement::lat() const {
  id const p = _v[@"lat"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavAutoModule::PolygonOptionsSpecHolesElementElement::lng() const {
  id const p = _v[@"lng"];
  return RCTBridgingToDouble(p);
}
inline facebook::react::LazyVector<JS::NativeNavAutoModule::PolygonOptionsSpecPointsElement>
JS::NativeNavAutoModule::PolygonOptionsSpec::points() const {
  id const p = _v[@"points"];
  return RCTBridgingToVec(
      p, ^JS::NativeNavAutoModule::PolygonOptionsSpecPointsElement(id itemValue_0) {
        return JS::NativeNavAutoModule::PolygonOptionsSpecPointsElement(itemValue_0);
      });
}
inline NSString *JS::NativeNavAutoModule::PolygonOptionsSpec::id_() const {
  id const p = _v[@"id"];
  return RCTBridgingToOptionalString(p);
}
inline facebook::react::LazyVector<
    facebook::react::LazyVector<JS::NativeNavAutoModule::PolygonOptionsSpecHolesElementElement>>
JS::NativeNavAutoModule::PolygonOptionsSpec::holes() const {
  id const p = _v[@"holes"];
  return RCTBridgingToVec(
      p,
      ^facebook::react::LazyVector<JS::NativeNavAutoModule::PolygonOptionsSpecHolesElementElement>(
          id itemValue_0) {
        return RCTBridgingToVec(
            itemValue_0,
            ^JS::NativeNavAutoModule::PolygonOptionsSpecHolesElementElement(id itemValue_1) {
              return JS::NativeNavAutoModule::PolygonOptionsSpecHolesElementElement(itemValue_1);
            });
      });
}
inline std::optional<double> JS::NativeNavAutoModule::PolygonOptionsSpec::strokeWidth() const {
  id const p = _v[@"strokeWidth"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeNavAutoModule::PolygonOptionsSpec::strokeColor() const {
  id const p = _v[@"strokeColor"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeNavAutoModule::PolygonOptionsSpec::fillColor() const {
  id const p = _v[@"fillColor"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<bool> JS::NativeNavAutoModule::PolygonOptionsSpec::geodesic() const {
  id const p = _v[@"geodesic"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeNavAutoModule::PolygonOptionsSpec::clickable() const {
  id const p = _v[@"clickable"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeNavAutoModule::PolygonOptionsSpec::visible() const {
  id const p = _v[@"visible"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<double> JS::NativeNavAutoModule::PolygonOptionsSpec::zIndex() const {
  id const p = _v[@"zIndex"];
  return RCTBridgingToOptionalDouble(p);
}

inline double JS::NativeNavAutoModule::CameraPositionSpecTarget::lat() const {
  id const p = _v[@"lat"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavAutoModule::CameraPositionSpecTarget::lng() const {
  id const p = _v[@"lng"];
  return RCTBridgingToDouble(p);
}
inline std::optional<JS::NativeNavAutoModule::CameraPositionSpecTarget>
JS::NativeNavAutoModule::CameraPositionSpec::target() const {
  id const p = _v[@"target"];
  return (p == nil ? std::nullopt
                   : std::make_optional(JS::NativeNavAutoModule::CameraPositionSpecTarget(p)));
}
inline std::optional<double> JS::NativeNavAutoModule::CameraPositionSpec::bearing() const {
  id const p = _v[@"bearing"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeNavAutoModule::CameraPositionSpec::tilt() const {
  id const p = _v[@"tilt"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeNavAutoModule::CameraPositionSpec::zoom() const {
  id const p = _v[@"zoom"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeNavModule::TOSDialogOptionsSpec::title() const {
  id const p = _v[@"title"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeNavModule::TOSDialogOptionsSpec::companyName() const {
  id const p = _v[@"companyName"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<bool> JS::NativeNavModule::TOSDialogOptionsSpec::showOnlyDisclaimer() const {
  id const p = _v[@"showOnlyDisclaimer"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<double> JS::NativeNavModule::RoutingOptionsSpec::travelMode() const {
  id const p = _v[@"travelMode"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeNavModule::RoutingOptionsSpec::routingStrategy() const {
  id const p = _v[@"routingStrategy"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeNavModule::RoutingOptionsSpec::alternateRoutesStrategy()
    const {
  id const p = _v[@"alternateRoutesStrategy"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<bool> JS::NativeNavModule::RoutingOptionsSpec::avoidFerries() const {
  id const p = _v[@"avoidFerries"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeNavModule::RoutingOptionsSpec::avoidTolls() const {
  id const p = _v[@"avoidTolls"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeNavModule::RoutingOptionsSpec::avoidHighways() const {
  id const p = _v[@"avoidHighways"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeNavModule::DisplayOptionsSpec::showDestinationMarkers() const {
  id const p = _v[@"showDestinationMarkers"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeNavModule::DisplayOptionsSpec::showStopSigns() const {
  id const p = _v[@"showStopSigns"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeNavModule::DisplayOptionsSpec::showTrafficLights() const {
  id const p = _v[@"showTrafficLights"];
  return RCTBridgingToOptionalBool(p);
}
inline double JS::NativeNavModule::SpeedAlertOptionsSpec::majorSpeedAlertPercentThreshold() const {
  id const p = _v[@"majorSpeedAlertPercentThreshold"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavModule::SpeedAlertOptionsSpec::minorSpeedAlertPercentThreshold() const {
  id const p = _v[@"minorSpeedAlertPercentThreshold"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavModule::SpeedAlertOptionsSpec::severityUpgradeDurationSeconds() const {
  id const p = _v[@"severityUpgradeDurationSeconds"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavModule::LatLngSpec::lat() const {
  id const p = _v[@"lat"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavModule::LatLngSpec::lng() const {
  id const p = _v[@"lng"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavModule::LocationSimulationOptionsSpec::speedMultiplier() const {
  id const p = _v[@"speedMultiplier"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavViewModule::CircleOptionsSpecCenter::lat() const {
  id const p = _v[@"lat"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavViewModule::CircleOptionsSpecCenter::lng() const {
  id const p = _v[@"lng"];
  return RCTBridgingToDouble(p);
}
inline JS::NativeNavViewModule::CircleOptionsSpecCenter
JS::NativeNavViewModule::CircleOptionsSpec::center() const {
  id const p = _v[@"center"];
  return JS::NativeNavViewModule::CircleOptionsSpecCenter(p);
}
inline NSString *JS::NativeNavViewModule::CircleOptionsSpec::id_() const {
  id const p = _v[@"id"];
  return RCTBridgingToOptionalString(p);
}
inline double JS::NativeNavViewModule::CircleOptionsSpec::radius() const {
  id const p = _v[@"radius"];
  return RCTBridgingToDouble(p);
}
inline std::optional<double> JS::NativeNavViewModule::CircleOptionsSpec::strokeWidth() const {
  id const p = _v[@"strokeWidth"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeNavViewModule::CircleOptionsSpec::strokeColor() const {
  id const p = _v[@"strokeColor"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeNavViewModule::CircleOptionsSpec::fillColor() const {
  id const p = _v[@"fillColor"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<bool> JS::NativeNavViewModule::CircleOptionsSpec::clickable() const {
  id const p = _v[@"clickable"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeNavViewModule::CircleOptionsSpec::visible() const {
  id const p = _v[@"visible"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<double> JS::NativeNavViewModule::CircleOptionsSpec::zIndex() const {
  id const p = _v[@"zIndex"];
  return RCTBridgingToOptionalDouble(p);
}
inline double JS::NativeNavViewModule::MarkerOptionsSpecPosition::lat() const {
  id const p = _v[@"lat"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavViewModule::MarkerOptionsSpecPosition::lng() const {
  id const p = _v[@"lng"];
  return RCTBridgingToDouble(p);
}
inline JS::NativeNavViewModule::MarkerOptionsSpecPosition
JS::NativeNavViewModule::MarkerOptionsSpec::position() const {
  id const p = _v[@"position"];
  return JS::NativeNavViewModule::MarkerOptionsSpecPosition(p);
}
inline NSString *JS::NativeNavViewModule::MarkerOptionsSpec::id_() const {
  id const p = _v[@"id"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeNavViewModule::MarkerOptionsSpec::imgPath() const {
  id const p = _v[@"imgPath"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeNavViewModule::MarkerOptionsSpec::title() const {
  id const p = _v[@"title"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeNavViewModule::MarkerOptionsSpec::snippet() const {
  id const p = _v[@"snippet"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<double> JS::NativeNavViewModule::MarkerOptionsSpec::alpha() const {
  id const p = _v[@"alpha"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeNavViewModule::MarkerOptionsSpec::rotation() const {
  id const p = _v[@"rotation"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<bool> JS::NativeNavViewModule::MarkerOptionsSpec::draggable() const {
  id const p = _v[@"draggable"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeNavViewModule::MarkerOptionsSpec::flat() const {
  id const p = _v[@"flat"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeNavViewModule::MarkerOptionsSpec::visible() const {
  id const p = _v[@"visible"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<double> JS::NativeNavViewModule::MarkerOptionsSpec::zIndex() const {
  id const p = _v[@"zIndex"];
  return RCTBridgingToOptionalDouble(p);
}
inline double JS::NativeNavViewModule::PolylineOptionsSpecPointsElement::lat() const {
  id const p = _v[@"lat"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavViewModule::PolylineOptionsSpecPointsElement::lng() const {
  id const p = _v[@"lng"];
  return RCTBridgingToDouble(p);
}
inline facebook::react::LazyVector<JS::NativeNavViewModule::PolylineOptionsSpecPointsElement>
JS::NativeNavViewModule::PolylineOptionsSpec::points() const {
  id const p = _v[@"points"];
  return RCTBridgingToVec(
      p, ^JS::NativeNavViewModule::PolylineOptionsSpecPointsElement(id itemValue_0) {
        return JS::NativeNavViewModule::PolylineOptionsSpecPointsElement(itemValue_0);
      });
}
inline NSString *JS::NativeNavViewModule::PolylineOptionsSpec::id_() const {
  id const p = _v[@"id"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeNavViewModule::PolylineOptionsSpec::color() const {
  id const p = _v[@"color"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<double> JS::NativeNavViewModule::PolylineOptionsSpec::width() const {
  id const p = _v[@"width"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<bool> JS::NativeNavViewModule::PolylineOptionsSpec::clickable() const {
  id const p = _v[@"clickable"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeNavViewModule::PolylineOptionsSpec::visible() const {
  id const p = _v[@"visible"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<double> JS::NativeNavViewModule::PolylineOptionsSpec::zIndex() const {
  id const p = _v[@"zIndex"];
  return RCTBridgingToOptionalDouble(p);
}
inline double JS::NativeNavViewModule::PolygonOptionsSpecPointsElement::lat() const {
  id const p = _v[@"lat"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavViewModule::PolygonOptionsSpecPointsElement::lng() const {
  id const p = _v[@"lng"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavViewModule::PolygonOptionsSpecHolesElementElement::lat() const {
  id const p = _v[@"lat"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavViewModule::PolygonOptionsSpecHolesElementElement::lng() const {
  id const p = _v[@"lng"];
  return RCTBridgingToDouble(p);
}
inline facebook::react::LazyVector<JS::NativeNavViewModule::PolygonOptionsSpecPointsElement>
JS::NativeNavViewModule::PolygonOptionsSpec::points() const {
  id const p = _v[@"points"];
  return RCTBridgingToVec(
      p, ^JS::NativeNavViewModule::PolygonOptionsSpecPointsElement(id itemValue_0) {
        return JS::NativeNavViewModule::PolygonOptionsSpecPointsElement(itemValue_0);
      });
}
inline NSString *JS::NativeNavViewModule::PolygonOptionsSpec::id_() const {
  id const p = _v[@"id"];
  return RCTBridgingToOptionalString(p);
}
inline facebook::react::LazyVector<
    facebook::react::LazyVector<JS::NativeNavViewModule::PolygonOptionsSpecHolesElementElement>>
JS::NativeNavViewModule::PolygonOptionsSpec::holes() const {
  id const p = _v[@"holes"];
  return RCTBridgingToVec(
      p,
      ^facebook::react::LazyVector<JS::NativeNavViewModule::PolygonOptionsSpecHolesElementElement>(
          id itemValue_0) {
        return RCTBridgingToVec(
            itemValue_0,
            ^JS::NativeNavViewModule::PolygonOptionsSpecHolesElementElement(id itemValue_1) {
              return JS::NativeNavViewModule::PolygonOptionsSpecHolesElementElement(itemValue_1);
            });
      });
}
inline std::optional<double> JS::NativeNavViewModule::PolygonOptionsSpec::strokeWidth() const {
  id const p = _v[@"strokeWidth"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeNavViewModule::PolygonOptionsSpec::strokeColor() const {
  id const p = _v[@"strokeColor"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeNavViewModule::PolygonOptionsSpec::fillColor() const {
  id const p = _v[@"fillColor"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<bool> JS::NativeNavViewModule::PolygonOptionsSpec::geodesic() const {
  id const p = _v[@"geodesic"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeNavViewModule::PolygonOptionsSpec::clickable() const {
  id const p = _v[@"clickable"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeNavViewModule::PolygonOptionsSpec::visible() const {
  id const p = _v[@"visible"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<double> JS::NativeNavViewModule::PolygonOptionsSpec::zIndex() const {
  id const p = _v[@"zIndex"];
  return RCTBridgingToOptionalDouble(p);
}

inline double JS::NativeNavViewModule::CameraPositionSpecTarget::lat() const {
  id const p = _v[@"lat"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeNavViewModule::CameraPositionSpecTarget::lng() const {
  id const p = _v[@"lng"];
  return RCTBridgingToDouble(p);
}
inline std::optional<JS::NativeNavViewModule::CameraPositionSpecTarget>
JS::NativeNavViewModule::CameraPositionSpec::target() const {
  id const p = _v[@"target"];
  return (p == nil ? std::nullopt
                   : std::make_optional(JS::NativeNavViewModule::CameraPositionSpecTarget(p)));
}
inline std::optional<double> JS::NativeNavViewModule::CameraPositionSpec::bearing() const {
  id const p = _v[@"bearing"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeNavViewModule::CameraPositionSpec::tilt() const {
  id const p = _v[@"tilt"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeNavViewModule::CameraPositionSpec::zoom() const {
  id const p = _v[@"zoom"];
  return RCTBridgingToOptionalDouble(p);
}
NS_ASSUME_NONNULL_END
#endif  // RNNavigationSdkSpec_H
