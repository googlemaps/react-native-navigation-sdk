// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * This code was generated by
 * [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "RNNavigationSdkSpec.h"

@implementation NativeNavAutoModuleSpecBase
- (void)emitOnAutoScreenAvailabilityChanged:(BOOL)value {
  _eventEmitterCallback("onAutoScreenAvailabilityChanged", [NSNumber numberWithBool:value]);
}
- (void)emitOnCustomNavigationAutoEvent:(NSDictionary*)value {
  _eventEmitterCallback("onCustomNavigationAutoEvent", value);
}

- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper*)eventEmitterCallbackWrapper {
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeNavAutoModule_CircleOptionsSpecCenter)
+ (RCTManagedPointer*)JS_NativeNavAutoModule_CircleOptionsSpecCenter:(id)json {
  return facebook::react::managedPointer<JS::NativeNavAutoModule::CircleOptionsSpecCenter>(json);
}
@end
@implementation RCTCxxConvert (NativeNavAutoModule_CircleOptionsSpec)
+ (RCTManagedPointer*)JS_NativeNavAutoModule_CircleOptionsSpec:(id)json {
  return facebook::react::managedPointer<JS::NativeNavAutoModule::CircleOptionsSpec>(json);
}
@end
@implementation RCTCxxConvert (NativeNavAutoModule_MarkerOptionsSpecPosition)
+ (RCTManagedPointer*)JS_NativeNavAutoModule_MarkerOptionsSpecPosition:(id)json {
  return facebook::react::managedPointer<JS::NativeNavAutoModule::MarkerOptionsSpecPosition>(json);
}
@end
@implementation RCTCxxConvert (NativeNavAutoModule_MarkerOptionsSpec)
+ (RCTManagedPointer*)JS_NativeNavAutoModule_MarkerOptionsSpec:(id)json {
  return facebook::react::managedPointer<JS::NativeNavAutoModule::MarkerOptionsSpec>(json);
}
@end
@implementation RCTCxxConvert (NativeNavAutoModule_PolylineOptionsSpecPointsElement)
+ (RCTManagedPointer*)JS_NativeNavAutoModule_PolylineOptionsSpecPointsElement:(id)json {
  return facebook::react::managedPointer<JS::NativeNavAutoModule::PolylineOptionsSpecPointsElement>(
      json);
}
@end
@implementation RCTCxxConvert (NativeNavAutoModule_PolylineOptionsSpec)
+ (RCTManagedPointer*)JS_NativeNavAutoModule_PolylineOptionsSpec:(id)json {
  return facebook::react::managedPointer<JS::NativeNavAutoModule::PolylineOptionsSpec>(json);
}
@end
@implementation RCTCxxConvert (NativeNavAutoModule_PolygonOptionsSpecPointsElement)
+ (RCTManagedPointer*)JS_NativeNavAutoModule_PolygonOptionsSpecPointsElement:(id)json {
  return facebook::react::managedPointer<JS::NativeNavAutoModule::PolygonOptionsSpecPointsElement>(
      json);
}
@end
@implementation RCTCxxConvert (NativeNavAutoModule_PolygonOptionsSpecHolesElementElement)
+ (RCTManagedPointer*)JS_NativeNavAutoModule_PolygonOptionsSpecHolesElementElement:(id)json {
  return facebook::react::managedPointer<
      JS::NativeNavAutoModule::PolygonOptionsSpecHolesElementElement>(json);
}
@end
@implementation RCTCxxConvert (NativeNavAutoModule_PolygonOptionsSpec)
+ (RCTManagedPointer*)JS_NativeNavAutoModule_PolygonOptionsSpec:(id)json {
  return facebook::react::managedPointer<JS::NativeNavAutoModule::PolygonOptionsSpec>(json);
}
@end
@implementation RCTCxxConvert (NativeNavAutoModule_SpecAddGroundOverlayOptions)
+ (RCTManagedPointer*)JS_NativeNavAutoModule_SpecAddGroundOverlayOptions:(id)json {
  return facebook::react::managedPointer<JS::NativeNavAutoModule::SpecAddGroundOverlayOptions>(
      json);
}
@end
@implementation RCTCxxConvert (NativeNavAutoModule_CameraPositionSpecTarget)
+ (RCTManagedPointer*)JS_NativeNavAutoModule_CameraPositionSpecTarget:(id)json {
  return facebook::react::managedPointer<JS::NativeNavAutoModule::CameraPositionSpecTarget>(json);
}
@end
@implementation RCTCxxConvert (NativeNavAutoModule_CameraPositionSpec)
+ (RCTManagedPointer*)JS_NativeNavAutoModule_CameraPositionSpec:(id)json {
  return facebook::react::managedPointer<JS::NativeNavAutoModule::CameraPositionSpec>(json);
}
@end
namespace facebook::react {

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_isAutoScreenAvailable(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "isAutoScreenAvailable",
                        @selector(isAutoScreenAvailable:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_setMapType(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, VoidKind, "setMapType", @selector(setMapType:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_setMapStyle(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, VoidKind, "setMapStyle", @selector(setMapStyle:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_clearMapView(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "clearMapView", @selector(clearMapView:reject:), args,
                        count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_addCircle(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "addCircle", @selector(addCircle:resolve:reject:), args,
                        count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_addMarker(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "addMarker", @selector(addMarker:resolve:reject:), args,
                        count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_addPolyline(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "addPolyline", @selector(addPolyline:resolve:reject:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_addPolygon(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "addPolygon", @selector(addPolygon:resolve:reject:), args,
                        count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_addGroundOverlay(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "addGroundOverlay",
                        @selector(addGroundOverlay:resolve:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_moveCamera(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "moveCamera", @selector(moveCamera:resolve:reject:), args,
                        count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_removeMarker(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "removeMarker", @selector(removeMarker:resolve:reject:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_removePolyline(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "removePolyline",
                        @selector(removePolyline:resolve:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_removePolygon(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "removePolygon", @selector(removePolygon:resolve:reject:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_removeCircle(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "removeCircle", @selector(removeCircle:resolve:reject:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_removeGroundOverlay(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "removeGroundOverlay",
                        @selector(removeGroundOverlay:resolve:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_setIndoorEnabled(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, VoidKind, "setIndoorEnabled", @selector(setIndoorEnabled:), args,
                        count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_setTrafficEnabled(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, VoidKind, "setTrafficEnabled", @selector(setTrafficEnabled:), args,
                        count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_setCompassEnabled(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, VoidKind, "setCompassEnabled", @selector(setCompassEnabled:), args,
                        count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_setMyLocationEnabled(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, VoidKind, "setMyLocationEnabled", @selector(setMyLocationEnabled:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_setBuildingsEnabled(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, VoidKind, "setBuildingsEnabled", @selector(setBuildingsEnabled:), args,
                        count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_setZoomLevel(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "setZoomLevel", @selector(setZoomLevel:resolve:reject:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_setMapPadding(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, VoidKind, "setMapPadding", @selector(setMapPadding:left:bottom:right:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_getCameraPosition(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "getCameraPosition", @selector(getCameraPosition:reject:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_getMyLocation(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "getMyLocation", @selector(getMyLocation:reject:), args,
                        count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_getUiSettings(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "getUiSettings", @selector(getUiSettings:reject:), args,
                        count);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_isMyLocationEnabled(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "isMyLocationEnabled",
                        @selector(isMyLocationEnabled:reject:), args, count);
}

NativeNavAutoModuleSpecJSI::NativeNavAutoModuleSpecJSI(const ObjCTurboModule::InitParams& params)
    : ObjCTurboModule(params) {
  methodMap_["isAutoScreenAvailable"] =
      MethodMetadata{0, __hostFunction_NativeNavAutoModuleSpecJSI_isAutoScreenAvailable};

  methodMap_["setMapType"] =
      MethodMetadata{1, __hostFunction_NativeNavAutoModuleSpecJSI_setMapType};

  methodMap_["setMapStyle"] =
      MethodMetadata{1, __hostFunction_NativeNavAutoModuleSpecJSI_setMapStyle};

  methodMap_["clearMapView"] =
      MethodMetadata{0, __hostFunction_NativeNavAutoModuleSpecJSI_clearMapView};

  methodMap_["addCircle"] = MethodMetadata{1, __hostFunction_NativeNavAutoModuleSpecJSI_addCircle};
  setMethodArgConversionSelector(@"addCircle", 0, @"JS_NativeNavAutoModule_CircleOptionsSpec:");

  methodMap_["addMarker"] = MethodMetadata{1, __hostFunction_NativeNavAutoModuleSpecJSI_addMarker};
  setMethodArgConversionSelector(@"addMarker", 0, @"JS_NativeNavAutoModule_MarkerOptionsSpec:");

  methodMap_["addPolyline"] =
      MethodMetadata{1, __hostFunction_NativeNavAutoModuleSpecJSI_addPolyline};
  setMethodArgConversionSelector(@"addPolyline", 0, @"JS_NativeNavAutoModule_PolylineOptionsSpec:");

  methodMap_["addPolygon"] =
      MethodMetadata{1, __hostFunction_NativeNavAutoModuleSpecJSI_addPolygon};
  setMethodArgConversionSelector(@"addPolygon", 0, @"JS_NativeNavAutoModule_PolygonOptionsSpec:");

  methodMap_["addGroundOverlay"] =
      MethodMetadata{1, __hostFunction_NativeNavAutoModuleSpecJSI_addGroundOverlay};
  setMethodArgConversionSelector(@"addGroundOverlay", 0,
                                 @"JS_NativeNavAutoModule_SpecAddGroundOverlayOptions:");

  methodMap_["moveCamera"] =
      MethodMetadata{1, __hostFunction_NativeNavAutoModuleSpecJSI_moveCamera};
  setMethodArgConversionSelector(@"moveCamera", 0, @"JS_NativeNavAutoModule_CameraPositionSpec:");

  methodMap_["removeMarker"] =
      MethodMetadata{1, __hostFunction_NativeNavAutoModuleSpecJSI_removeMarker};

  methodMap_["removePolyline"] =
      MethodMetadata{1, __hostFunction_NativeNavAutoModuleSpecJSI_removePolyline};

  methodMap_["removePolygon"] =
      MethodMetadata{1, __hostFunction_NativeNavAutoModuleSpecJSI_removePolygon};

  methodMap_["removeCircle"] =
      MethodMetadata{1, __hostFunction_NativeNavAutoModuleSpecJSI_removeCircle};

  methodMap_["removeGroundOverlay"] =
      MethodMetadata{1, __hostFunction_NativeNavAutoModuleSpecJSI_removeGroundOverlay};

  methodMap_["setIndoorEnabled"] =
      MethodMetadata{1, __hostFunction_NativeNavAutoModuleSpecJSI_setIndoorEnabled};

  methodMap_["setTrafficEnabled"] =
      MethodMetadata{1, __hostFunction_NativeNavAutoModuleSpecJSI_setTrafficEnabled};

  methodMap_["setCompassEnabled"] =
      MethodMetadata{1, __hostFunction_NativeNavAutoModuleSpecJSI_setCompassEnabled};

  methodMap_["setMyLocationEnabled"] =
      MethodMetadata{1, __hostFunction_NativeNavAutoModuleSpecJSI_setMyLocationEnabled};

  methodMap_["setBuildingsEnabled"] =
      MethodMetadata{1, __hostFunction_NativeNavAutoModuleSpecJSI_setBuildingsEnabled};

  methodMap_["setZoomLevel"] =
      MethodMetadata{1, __hostFunction_NativeNavAutoModuleSpecJSI_setZoomLevel};

  methodMap_["setMapPadding"] =
      MethodMetadata{4, __hostFunction_NativeNavAutoModuleSpecJSI_setMapPadding};

  methodMap_["getCameraPosition"] =
      MethodMetadata{0, __hostFunction_NativeNavAutoModuleSpecJSI_getCameraPosition};

  methodMap_["getMyLocation"] =
      MethodMetadata{0, __hostFunction_NativeNavAutoModuleSpecJSI_getMyLocation};

  methodMap_["getUiSettings"] =
      MethodMetadata{0, __hostFunction_NativeNavAutoModuleSpecJSI_getUiSettings};

  methodMap_["isMyLocationEnabled"] =
      MethodMetadata{0, __hostFunction_NativeNavAutoModuleSpecJSI_isMyLocationEnabled};

  eventEmitterMap_["onAutoScreenAvailabilityChanged"] = std::make_shared<AsyncEventEmitter<id>>();
  eventEmitterMap_["onCustomNavigationAutoEvent"] = std::make_shared<AsyncEventEmitter<id>>();
  setEventEmitterCallback([&](const std::string& name, id value) {
    static_cast<AsyncEventEmitter<id>&>(*eventEmitterMap_[name]).emit(value);
  });
}
}  // namespace facebook::react

@implementation NativeNavModuleSpecBase
- (void)emitOnNavigationReady {
  _eventEmitterCallback("onNavigationReady", nil);
}
- (void)emitOnLocationChanged:(NSDictionary*)value {
  _eventEmitterCallback("onLocationChanged", value);
}
- (void)emitOnArrival:(NSDictionary*)value {
  _eventEmitterCallback("onArrival", value);
}
- (void)emitOnRemainingTimeOrDistanceChanged {
  _eventEmitterCallback("onRemainingTimeOrDistanceChanged", nil);
}
- (void)emitOnRouteChanged {
  _eventEmitterCallback("onRouteChanged", nil);
}
- (void)emitOnReroutingRequestedByOffRoute {
  _eventEmitterCallback("onReroutingRequestedByOffRoute", nil);
}
- (void)emitOnStartGuidance {
  _eventEmitterCallback("onStartGuidance", nil);
}
- (void)emitOnTurnByTurn:(NSDictionary*)value {
  _eventEmitterCallback("onTurnByTurn", value);
}
- (void)emitOnRawLocationChanged:(NSDictionary*)value {
  _eventEmitterCallback("onRawLocationChanged", value);
}
- (void)emitOnTrafficUpdated {
  _eventEmitterCallback("onTrafficUpdated", nil);
}
- (void)emitLogDebugInfo:(NSDictionary*)value {
  _eventEmitterCallback("logDebugInfo", value);
}

- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper*)eventEmitterCallbackWrapper {
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeNavModule_TOSDialogOptionsSpec)
+ (RCTManagedPointer*)JS_NativeNavModule_TOSDialogOptionsSpec:(id)json {
  return facebook::react::managedPointer<JS::NativeNavModule::TOSDialogOptionsSpec>(json);
}
@end
@implementation RCTCxxConvert (NativeNavModule_RoutingOptionsSpec)
+ (RCTManagedPointer*)JS_NativeNavModule_RoutingOptionsSpec:(id)json {
  return facebook::react::managedPointer<JS::NativeNavModule::RoutingOptionsSpec>(json);
}
@end
@implementation RCTCxxConvert (NativeNavModule_DisplayOptionsSpec)
+ (RCTManagedPointer*)JS_NativeNavModule_DisplayOptionsSpec:(id)json {
  return facebook::react::managedPointer<JS::NativeNavModule::DisplayOptionsSpec>(json);
}
@end
@implementation RCTCxxConvert (NativeNavModule_SpeedAlertOptionsSpec)
+ (RCTManagedPointer*)JS_NativeNavModule_SpeedAlertOptionsSpec:(id)json {
  return facebook::react::managedPointer<JS::NativeNavModule::SpeedAlertOptionsSpec>(json);
}
@end
@implementation RCTCxxConvert (NativeNavModule_LatLngSpec)
+ (RCTManagedPointer*)JS_NativeNavModule_LatLngSpec:(id)json {
  return facebook::react::managedPointer<JS::NativeNavModule::LatLngSpec>(json);
}
@end
@implementation RCTCxxConvert (NativeNavModule_LocationSimulationOptionsSpec)
+ (RCTManagedPointer*)JS_NativeNavModule_LocationSimulationOptionsSpec:(id)json {
  return facebook::react::managedPointer<JS::NativeNavModule::LocationSimulationOptionsSpec>(json);
}
@end
namespace facebook::react {

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_initializeNavigator(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "initializeNavigator",
                        @selector(initializeNavigator:taskRemovedBehavior:resolve:reject:), args,
                        count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_cleanup(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "cleanup", @selector(cleanup:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_setDestinations(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "setDestinations",
                        @selector(setDestinations:routingOptions:displayOptions:resolve:reject:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_continueToNextDestination(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "continueToNextDestination",
                        @selector(continueToNextDestination:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_clearDestinations(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "clearDestinations", @selector(clearDestinations:reject:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_startGuidance(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "startGuidance", @selector(startGuidance:reject:), args,
                        count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_stopGuidance(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "stopGuidance", @selector(stopGuidance:reject:), args,
                        count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_setSpeedAlertOptions(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "setSpeedAlertOptions",
                        @selector(setSpeedAlertOptions:resolve:reject:), args, count);
}

static facebook::jsi::Value
__hostFunction_NativeNavModuleSpecJSI_setAbnormalTerminatingReportingEnabled(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, VoidKind, "setAbnormalTerminatingReportingEnabled",
                        @selector(setAbnormalTerminatingReportingEnabled:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_setAudioGuidanceType(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "setAudioGuidanceType",
                        @selector(setAudioGuidanceType:resolve:reject:), args, count);
}

static facebook::jsi::Value
__hostFunction_NativeNavModuleSpecJSI_setBackgroundLocationUpdatesEnabled(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, VoidKind, "setBackgroundLocationUpdatesEnabled",
                        @selector(setBackgroundLocationUpdatesEnabled:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_setTurnByTurnLoggingEnabled(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, VoidKind, "setTurnByTurnLoggingEnabled",
                        @selector(setTurnByTurnLoggingEnabled:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_areTermsAccepted(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "areTermsAccepted", @selector(areTermsAccepted:reject:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_getCurrentRouteSegment(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "getCurrentRouteSegment",
                        @selector(getCurrentRouteSegment:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_getRouteSegments(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "getRouteSegments", @selector(getRouteSegments:reject:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_getCurrentTimeAndDistance(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "getCurrentTimeAndDistance",
                        @selector(getCurrentTimeAndDistance:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_getTraveledPath(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "getTraveledPath", @selector(getTraveledPath:reject:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_getNavSDKVersion(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "getNavSDKVersion", @selector(getNavSDKVersion:reject:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_stopUpdatingLocation(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "stopUpdatingLocation",
                        @selector(stopUpdatingLocation:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_startUpdatingLocation(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "startUpdatingLocation",
                        @selector(startUpdatingLocation:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_simulateLocation(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "simulateLocation",
                        @selector(simulateLocation:resolve:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_resumeLocationSimulation(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "resumeLocationSimulation",
                        @selector(resumeLocationSimulation:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_pauseLocationSimulation(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "pauseLocationSimulation",
                        @selector(pauseLocationSimulation:reject:), args, count);
}

static facebook::jsi::Value
__hostFunction_NativeNavModuleSpecJSI_simulateLocationsAlongExistingRoute(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "simulateLocationsAlongExistingRoute",
                        @selector(simulateLocationsAlongExistingRoute:resolve:reject:), args,
                        count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_stopLocationSimulation(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "stopLocationSimulation",
                        @selector(stopLocationSimulation:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_resetTermsAccepted(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, VoidKind, "resetTermsAccepted", @selector(resetTermsAccepted), args,
                        count);
}

NativeNavModuleSpecJSI::NativeNavModuleSpecJSI(const ObjCTurboModule::InitParams& params)
    : ObjCTurboModule(params) {
  methodMap_["initializeNavigator"] =
      MethodMetadata{2, __hostFunction_NativeNavModuleSpecJSI_initializeNavigator};
  setMethodArgConversionSelector(@"initializeNavigator", 0,
                                 @"JS_NativeNavModule_TOSDialogOptionsSpec:");

  methodMap_["cleanup"] = MethodMetadata{0, __hostFunction_NativeNavModuleSpecJSI_cleanup};

  methodMap_["setDestinations"] =
      MethodMetadata{3, __hostFunction_NativeNavModuleSpecJSI_setDestinations};
  setMethodArgConversionSelector(@"setDestinations", 1, @"JS_NativeNavModule_RoutingOptionsSpec:");
  setMethodArgConversionSelector(@"setDestinations", 2, @"JS_NativeNavModule_DisplayOptionsSpec:");

  methodMap_["continueToNextDestination"] =
      MethodMetadata{0, __hostFunction_NativeNavModuleSpecJSI_continueToNextDestination};

  methodMap_["clearDestinations"] =
      MethodMetadata{0, __hostFunction_NativeNavModuleSpecJSI_clearDestinations};

  methodMap_["startGuidance"] =
      MethodMetadata{0, __hostFunction_NativeNavModuleSpecJSI_startGuidance};

  methodMap_["stopGuidance"] =
      MethodMetadata{0, __hostFunction_NativeNavModuleSpecJSI_stopGuidance};

  methodMap_["setSpeedAlertOptions"] =
      MethodMetadata{1, __hostFunction_NativeNavModuleSpecJSI_setSpeedAlertOptions};
  setMethodArgConversionSelector(@"setSpeedAlertOptions", 0,
                                 @"JS_NativeNavModule_SpeedAlertOptionsSpec:");

  methodMap_["setAbnormalTerminatingReportingEnabled"] = MethodMetadata{
      1, __hostFunction_NativeNavModuleSpecJSI_setAbnormalTerminatingReportingEnabled};

  methodMap_["setAudioGuidanceType"] =
      MethodMetadata{1, __hostFunction_NativeNavModuleSpecJSI_setAudioGuidanceType};

  methodMap_["setBackgroundLocationUpdatesEnabled"] =
      MethodMetadata{1, __hostFunction_NativeNavModuleSpecJSI_setBackgroundLocationUpdatesEnabled};

  methodMap_["setTurnByTurnLoggingEnabled"] =
      MethodMetadata{1, __hostFunction_NativeNavModuleSpecJSI_setTurnByTurnLoggingEnabled};

  methodMap_["areTermsAccepted"] =
      MethodMetadata{0, __hostFunction_NativeNavModuleSpecJSI_areTermsAccepted};

  methodMap_["getCurrentRouteSegment"] =
      MethodMetadata{0, __hostFunction_NativeNavModuleSpecJSI_getCurrentRouteSegment};

  methodMap_["getRouteSegments"] =
      MethodMetadata{0, __hostFunction_NativeNavModuleSpecJSI_getRouteSegments};

  methodMap_["getCurrentTimeAndDistance"] =
      MethodMetadata{0, __hostFunction_NativeNavModuleSpecJSI_getCurrentTimeAndDistance};

  methodMap_["getTraveledPath"] =
      MethodMetadata{0, __hostFunction_NativeNavModuleSpecJSI_getTraveledPath};

  methodMap_["getNavSDKVersion"] =
      MethodMetadata{0, __hostFunction_NativeNavModuleSpecJSI_getNavSDKVersion};

  methodMap_["stopUpdatingLocation"] =
      MethodMetadata{0, __hostFunction_NativeNavModuleSpecJSI_stopUpdatingLocation};

  methodMap_["startUpdatingLocation"] =
      MethodMetadata{0, __hostFunction_NativeNavModuleSpecJSI_startUpdatingLocation};

  methodMap_["simulateLocation"] =
      MethodMetadata{1, __hostFunction_NativeNavModuleSpecJSI_simulateLocation};
  setMethodArgConversionSelector(@"simulateLocation", 0, @"JS_NativeNavModule_LatLngSpec:");

  methodMap_["resumeLocationSimulation"] =
      MethodMetadata{0, __hostFunction_NativeNavModuleSpecJSI_resumeLocationSimulation};

  methodMap_["pauseLocationSimulation"] =
      MethodMetadata{0, __hostFunction_NativeNavModuleSpecJSI_pauseLocationSimulation};

  methodMap_["simulateLocationsAlongExistingRoute"] =
      MethodMetadata{1, __hostFunction_NativeNavModuleSpecJSI_simulateLocationsAlongExistingRoute};
  setMethodArgConversionSelector(@"simulateLocationsAlongExistingRoute", 0,
                                 @"JS_NativeNavModule_LocationSimulationOptionsSpec:");

  methodMap_["stopLocationSimulation"] =
      MethodMetadata{0, __hostFunction_NativeNavModuleSpecJSI_stopLocationSimulation};

  methodMap_["resetTermsAccepted"] =
      MethodMetadata{0, __hostFunction_NativeNavModuleSpecJSI_resetTermsAccepted};

  eventEmitterMap_["onNavigationReady"] = std::make_shared<AsyncEventEmitter<id>>();
  eventEmitterMap_["onLocationChanged"] = std::make_shared<AsyncEventEmitter<id>>();
  eventEmitterMap_["onArrival"] = std::make_shared<AsyncEventEmitter<id>>();
  eventEmitterMap_["onRemainingTimeOrDistanceChanged"] = std::make_shared<AsyncEventEmitter<id>>();
  eventEmitterMap_["onRouteChanged"] = std::make_shared<AsyncEventEmitter<id>>();
  eventEmitterMap_["onReroutingRequestedByOffRoute"] = std::make_shared<AsyncEventEmitter<id>>();
  eventEmitterMap_["onStartGuidance"] = std::make_shared<AsyncEventEmitter<id>>();
  eventEmitterMap_["onTurnByTurn"] = std::make_shared<AsyncEventEmitter<id>>();
  eventEmitterMap_["onRawLocationChanged"] = std::make_shared<AsyncEventEmitter<id>>();
  eventEmitterMap_["onTrafficUpdated"] = std::make_shared<AsyncEventEmitter<id>>();
  eventEmitterMap_["logDebugInfo"] = std::make_shared<AsyncEventEmitter<id>>();
  setEventEmitterCallback([&](const std::string& name, id value) {
    static_cast<AsyncEventEmitter<id>&>(*eventEmitterMap_[name]).emit(value);
  });
}
}  // namespace facebook::react

@implementation NativeNavViewModuleSpecBase

- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper*)eventEmitterCallbackWrapper {
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeNavViewModule_CircleOptionsSpecCenter)
+ (RCTManagedPointer*)JS_NativeNavViewModule_CircleOptionsSpecCenter:(id)json {
  return facebook::react::managedPointer<JS::NativeNavViewModule::CircleOptionsSpecCenter>(json);
}
@end
@implementation RCTCxxConvert (NativeNavViewModule_CircleOptionsSpec)
+ (RCTManagedPointer*)JS_NativeNavViewModule_CircleOptionsSpec:(id)json {
  return facebook::react::managedPointer<JS::NativeNavViewModule::CircleOptionsSpec>(json);
}
@end
@implementation RCTCxxConvert (NativeNavViewModule_MarkerOptionsSpecPosition)
+ (RCTManagedPointer*)JS_NativeNavViewModule_MarkerOptionsSpecPosition:(id)json {
  return facebook::react::managedPointer<JS::NativeNavViewModule::MarkerOptionsSpecPosition>(json);
}
@end
@implementation RCTCxxConvert (NativeNavViewModule_MarkerOptionsSpec)
+ (RCTManagedPointer*)JS_NativeNavViewModule_MarkerOptionsSpec:(id)json {
  return facebook::react::managedPointer<JS::NativeNavViewModule::MarkerOptionsSpec>(json);
}
@end
@implementation RCTCxxConvert (NativeNavViewModule_PolylineOptionsSpecPointsElement)
+ (RCTManagedPointer*)JS_NativeNavViewModule_PolylineOptionsSpecPointsElement:(id)json {
  return facebook::react::managedPointer<JS::NativeNavViewModule::PolylineOptionsSpecPointsElement>(
      json);
}
@end
@implementation RCTCxxConvert (NativeNavViewModule_PolylineOptionsSpec)
+ (RCTManagedPointer*)JS_NativeNavViewModule_PolylineOptionsSpec:(id)json {
  return facebook::react::managedPointer<JS::NativeNavViewModule::PolylineOptionsSpec>(json);
}
@end
@implementation RCTCxxConvert (NativeNavViewModule_PolygonOptionsSpecPointsElement)
+ (RCTManagedPointer*)JS_NativeNavViewModule_PolygonOptionsSpecPointsElement:(id)json {
  return facebook::react::managedPointer<JS::NativeNavViewModule::PolygonOptionsSpecPointsElement>(
      json);
}
@end
@implementation RCTCxxConvert (NativeNavViewModule_PolygonOptionsSpecHolesElementElement)
+ (RCTManagedPointer*)JS_NativeNavViewModule_PolygonOptionsSpecHolesElementElement:(id)json {
  return facebook::react::managedPointer<
      JS::NativeNavViewModule::PolygonOptionsSpecHolesElementElement>(json);
}
@end
@implementation RCTCxxConvert (NativeNavViewModule_PolygonOptionsSpec)
+ (RCTManagedPointer*)JS_NativeNavViewModule_PolygonOptionsSpec:(id)json {
  return facebook::react::managedPointer<JS::NativeNavViewModule::PolygonOptionsSpec>(json);
}
@end
@implementation RCTCxxConvert (NativeNavViewModule_SpecAddGroundOverlayOptions)
+ (RCTManagedPointer*)JS_NativeNavViewModule_SpecAddGroundOverlayOptions:(id)json {
  return facebook::react::managedPointer<JS::NativeNavViewModule::SpecAddGroundOverlayOptions>(
      json);
}
@end
@implementation RCTCxxConvert (NativeNavViewModule_CameraPositionSpecTarget)
+ (RCTManagedPointer*)JS_NativeNavViewModule_CameraPositionSpecTarget:(id)json {
  return facebook::react::managedPointer<JS::NativeNavViewModule::CameraPositionSpecTarget>(json);
}
@end
@implementation RCTCxxConvert (NativeNavViewModule_CameraPositionSpec)
+ (RCTManagedPointer*)JS_NativeNavViewModule_CameraPositionSpec:(id)json {
  return facebook::react::managedPointer<JS::NativeNavViewModule::CameraPositionSpec>(json);
}
@end
namespace facebook::react {

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_addCircle(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "addCircle", @selector(addCircle:options:resolve:reject:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_addMarker(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "addMarker", @selector(addMarker:options:resolve:reject:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_addPolyline(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "addPolyline",
                        @selector(addPolyline:options:resolve:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_addPolygon(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "addPolygon",
                        @selector(addPolygon:options:resolve:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_addGroundOverlay(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "addGroundOverlay",
                        @selector(addGroundOverlay:options:resolve:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_moveCamera(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "moveCamera",
                        @selector(moveCamera:cameraPosition:resolve:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_getCameraPosition(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "getCameraPosition",
                        @selector(getCameraPosition:resolve:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_getMyLocation(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "getMyLocation", @selector(getMyLocation:resolve:reject:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_getUiSettings(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "getUiSettings", @selector(getUiSettings:resolve:reject:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_isMyLocationEnabled(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "isMyLocationEnabled",
                        @selector(isMyLocationEnabled:resolve:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_showRouteOverview(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "showRouteOverview",
                        @selector(showRouteOverview:resolve:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_clearMapView(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "clearMapView", @selector(clearMapView:resolve:reject:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_removeMarker(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "removeMarker", @selector(removeMarker:id:resolve:reject:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_removePolyline(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "removePolyline",
                        @selector(removePolyline:id:resolve:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_removePolygon(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "removePolygon",
                        @selector(removePolygon:id:resolve:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_removeCircle(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "removeCircle", @selector(removeCircle:id:resolve:reject:),
                        args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_removeGroundOverlay(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "removeGroundOverlay",
                        @selector(removeGroundOverlay:id:resolve:reject:), args, count);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_setZoomLevel(
    facebook::jsi::Runtime& rt, TurboModule& turboModule, const facebook::jsi::Value* args,
    size_t count) {
  return static_cast<ObjCTurboModule&>(turboModule)
      .invokeObjCMethod(rt, PromiseKind, "setZoomLevel",
                        @selector(setZoomLevel:level:resolve:reject:), args, count);
}

NativeNavViewModuleSpecJSI::NativeNavViewModuleSpecJSI(const ObjCTurboModule::InitParams& params)
    : ObjCTurboModule(params) {
  methodMap_["addCircle"] = MethodMetadata{2, __hostFunction_NativeNavViewModuleSpecJSI_addCircle};
  setMethodArgConversionSelector(@"addCircle", 1, @"JS_NativeNavViewModule_CircleOptionsSpec:");

  methodMap_["addMarker"] = MethodMetadata{2, __hostFunction_NativeNavViewModuleSpecJSI_addMarker};
  setMethodArgConversionSelector(@"addMarker", 1, @"JS_NativeNavViewModule_MarkerOptionsSpec:");

  methodMap_["addPolyline"] =
      MethodMetadata{2, __hostFunction_NativeNavViewModuleSpecJSI_addPolyline};
  setMethodArgConversionSelector(@"addPolyline", 1, @"JS_NativeNavViewModule_PolylineOptionsSpec:");

  methodMap_["addPolygon"] =
      MethodMetadata{2, __hostFunction_NativeNavViewModuleSpecJSI_addPolygon};
  setMethodArgConversionSelector(@"addPolygon", 1, @"JS_NativeNavViewModule_PolygonOptionsSpec:");

  methodMap_["addGroundOverlay"] =
      MethodMetadata{2, __hostFunction_NativeNavViewModuleSpecJSI_addGroundOverlay};
  setMethodArgConversionSelector(@"addGroundOverlay", 1,
                                 @"JS_NativeNavViewModule_SpecAddGroundOverlayOptions:");

  methodMap_["moveCamera"] =
      MethodMetadata{2, __hostFunction_NativeNavViewModuleSpecJSI_moveCamera};
  setMethodArgConversionSelector(@"moveCamera", 1, @"JS_NativeNavViewModule_CameraPositionSpec:");

  methodMap_["getCameraPosition"] =
      MethodMetadata{1, __hostFunction_NativeNavViewModuleSpecJSI_getCameraPosition};

  methodMap_["getMyLocation"] =
      MethodMetadata{1, __hostFunction_NativeNavViewModuleSpecJSI_getMyLocation};

  methodMap_["getUiSettings"] =
      MethodMetadata{1, __hostFunction_NativeNavViewModuleSpecJSI_getUiSettings};

  methodMap_["isMyLocationEnabled"] =
      MethodMetadata{1, __hostFunction_NativeNavViewModuleSpecJSI_isMyLocationEnabled};

  methodMap_["showRouteOverview"] =
      MethodMetadata{1, __hostFunction_NativeNavViewModuleSpecJSI_showRouteOverview};

  methodMap_["clearMapView"] =
      MethodMetadata{1, __hostFunction_NativeNavViewModuleSpecJSI_clearMapView};

  methodMap_["removeMarker"] =
      MethodMetadata{2, __hostFunction_NativeNavViewModuleSpecJSI_removeMarker};

  methodMap_["removePolyline"] =
      MethodMetadata{2, __hostFunction_NativeNavViewModuleSpecJSI_removePolyline};

  methodMap_["removePolygon"] =
      MethodMetadata{2, __hostFunction_NativeNavViewModuleSpecJSI_removePolygon};

  methodMap_["removeCircle"] =
      MethodMetadata{2, __hostFunction_NativeNavViewModuleSpecJSI_removeCircle};

  methodMap_["removeGroundOverlay"] =
      MethodMetadata{2, __hostFunction_NativeNavViewModuleSpecJSI_removeGroundOverlay};

  methodMap_["setZoomLevel"] =
      MethodMetadata{2, __hostFunction_NativeNavViewModuleSpecJSI_setZoomLevel};
}
}  // namespace facebook::react
