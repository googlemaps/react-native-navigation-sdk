// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateEventEmitterCpp.js
 */

#include "EventEmitters.h"


namespace facebook::react {

void NavViewEventEmitter::onMapReady(OnMapReady $event) const {
  dispatchEvent("mapReady", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void NavViewEventEmitter::onMapClick(OnMapClick $event) const {
  dispatchEvent("mapClick", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "lat", $event.lat);
$payload.setProperty(runtime, "lng", $event.lng);
    return $payload;
  });
}


void NavViewEventEmitter::onMarkerClick(OnMarkerClick $event) const {
  dispatchEvent("markerClick", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    {
  auto position = jsi::Object(runtime);
  position.setProperty(runtime, "lat", $event.position.lat);
  position.setProperty(runtime, "lng", $event.position.lng);
  $payload.setProperty(runtime, "position", position);
}
$payload.setProperty(runtime, "id", $event.id);
$payload.setProperty(runtime, "title", $event.title);
$payload.setProperty(runtime, "alpha", $event.alpha);
$payload.setProperty(runtime, "rotation", $event.rotation);
$payload.setProperty(runtime, "snippet", $event.snippet);
$payload.setProperty(runtime, "zIndex", $event.zIndex);
    return $payload;
  });
}


void NavViewEventEmitter::onPolylineClick(OnPolylineClick $event) const {
  dispatchEvent("polylineClick", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    auto points = jsi::Array(runtime, $event.points.size());
    size_t pointsIndex = 0;
    for (auto pointsValue : $event.points) {
      auto pointsObject = jsi::Object(runtime);
      pointsObject.setProperty(runtime, "lat", pointsValue.lat);
pointsObject.setProperty(runtime, "lng", pointsValue.lng);
      points.setValueAtIndex(runtime, pointsIndex++, pointsObject);
    }
    $payload.setProperty(runtime, "points", points);
  
$payload.setProperty(runtime, "id", $event.id);
$payload.setProperty(runtime, "color", $event.color);
$payload.setProperty(runtime, "width", $event.width);
$payload.setProperty(runtime, "jointType", $event.jointType);
$payload.setProperty(runtime, "zIndex", $event.zIndex);
    return $payload;
  });
}


void NavViewEventEmitter::onPolygonClick(OnPolygonClick $event) const {
  dispatchEvent("polygonClick", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    auto points = jsi::Array(runtime, $event.points.size());
    size_t pointsIndex = 0;
    for (auto pointsValue : $event.points) {
      auto pointsObject = jsi::Object(runtime);
      pointsObject.setProperty(runtime, "lat", pointsValue.lat);
pointsObject.setProperty(runtime, "lng", pointsValue.lng);
      points.setValueAtIndex(runtime, pointsIndex++, pointsObject);
    }
    $payload.setProperty(runtime, "points", points);
  

    auto holes = jsi::Array(runtime, $event.holes.size());
    size_t holesIndex = 0;
    for (auto holesValue : $event.holes) {
      auto holesArray = jsi::Array(runtime, holesValue.size());
      size_t holesIndexInternal = 0;
      for (auto holesValueInternal : holesValue) {
        auto holesArrayObject = jsi::Object(runtime);
      holesArrayObject.setProperty(runtime, "lat", holesValueInternal.lat);
holesArrayObject.setProperty(runtime, "lng", holesValueInternal.lng);
      holesArray.setValueAtIndex(runtime, holesIndexInternal++, holesArrayObject);
      }
      holes.setValueAtIndex(runtime, holesIndex++, holesArray);
    }
    $payload.setProperty(runtime, "holes", holes);
  
$payload.setProperty(runtime, "id", $event.id);
$payload.setProperty(runtime, "fillColor", $event.fillColor);
$payload.setProperty(runtime, "strokeWidth", $event.strokeWidth);
$payload.setProperty(runtime, "strokeColor", $event.strokeColor);
$payload.setProperty(runtime, "strokeJointType", $event.strokeJointType);
$payload.setProperty(runtime, "zIndex", $event.zIndex);
$payload.setProperty(runtime, "geodesic", $event.geodesic);
    return $payload;
  });
}


void NavViewEventEmitter::onCircleClick(OnCircleClick $event) const {
  dispatchEvent("circleClick", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    {
  auto center = jsi::Object(runtime);
  center.setProperty(runtime, "lat", $event.center.lat);
  center.setProperty(runtime, "lng", $event.center.lng);
  $payload.setProperty(runtime, "center", center);
}
$payload.setProperty(runtime, "id", $event.id);
$payload.setProperty(runtime, "fillColor", $event.fillColor);
$payload.setProperty(runtime, "strokeWidth", $event.strokeWidth);
$payload.setProperty(runtime, "strokeColor", $event.strokeColor);
$payload.setProperty(runtime, "radius", $event.radius);
$payload.setProperty(runtime, "zIndex", $event.zIndex);
    return $payload;
  });
}


void NavViewEventEmitter::onGroundOverlayClick(OnGroundOverlayClick $event) const {
  dispatchEvent("groundOverlayClick", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "id", $event.id);
    return $payload;
  });
}


void NavViewEventEmitter::onMarkerInfoWindowTapped(OnMarkerInfoWindowTapped $event) const {
  dispatchEvent("markerInfoWindowTapped", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    {
  auto position = jsi::Object(runtime);
  position.setProperty(runtime, "lat", $event.position.lat);
  position.setProperty(runtime, "lng", $event.position.lng);
  $payload.setProperty(runtime, "position", position);
}
$payload.setProperty(runtime, "id", $event.id);
$payload.setProperty(runtime, "title", $event.title);
$payload.setProperty(runtime, "alpha", $event.alpha);
$payload.setProperty(runtime, "rotation", $event.rotation);
$payload.setProperty(runtime, "snippet", $event.snippet);
$payload.setProperty(runtime, "zIndex", $event.zIndex);
    return $payload;
  });
}


void NavViewEventEmitter::onRecenterButtonClick(OnRecenterButtonClick $event) const {
  dispatchEvent("recenterButtonClick", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void NavViewEventEmitter::onPromptVisibilityChanged(OnPromptVisibilityChanged $event) const {
  dispatchEvent("promptVisibilityChanged", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "visible", $event.visible);
    return $payload;
  });
}

} // namespace facebook::react
