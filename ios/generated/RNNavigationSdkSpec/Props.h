/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This code was generated by
 * [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be
 * lost once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

struct NavViewMapPaddingStruct {
  int top{0};
  int left{0};
  int bottom{0};
  int right{0};
};

static inline void fromRawValue(const PropsParserContext &context,
                                const RawValue &value,
                                NavViewMapPaddingStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_top = map.find("top");
  if (tmp_top != map.end()) {
    fromRawValue(context, tmp_top->second, result.top);
  }
  auto tmp_left = map.find("left");
  if (tmp_left != map.end()) {
    fromRawValue(context, tmp_left->second, result.left);
  }
  auto tmp_bottom = map.find("bottom");
  if (tmp_bottom != map.end()) {
    fromRawValue(context, tmp_bottom->second, result.bottom);
  }
  auto tmp_right = map.find("right");
  if (tmp_right != map.end()) {
    fromRawValue(context, tmp_right->second, result.right);
  }
}

static inline std::string toString(const NavViewMapPaddingStruct &value) {
  return "[Object NavViewMapPaddingStruct]";
}

struct NavViewInitialCameraPositionTargetStruct {
  Float lat{};
  Float lng{};
};

static inline void fromRawValue(
    const PropsParserContext &context, const RawValue &value,
    NavViewInitialCameraPositionTargetStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_lat = map.find("lat");
  if (tmp_lat != map.end()) {
    fromRawValue(context, tmp_lat->second, result.lat);
  }
  auto tmp_lng = map.find("lng");
  if (tmp_lng != map.end()) {
    fromRawValue(context, tmp_lng->second, result.lng);
  }
}

static inline std::string toString(
    const NavViewInitialCameraPositionTargetStruct &value) {
  return "[Object NavViewInitialCameraPositionTargetStruct]";
}

struct NavViewInitialCameraPositionStruct {
  NavViewInitialCameraPositionTargetStruct target{};
  Float bearing{};
  Float tilt{};
  Float zoom{};
};

static inline void fromRawValue(const PropsParserContext &context,
                                const RawValue &value,
                                NavViewInitialCameraPositionStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_target = map.find("target");
  if (tmp_target != map.end()) {
    fromRawValue(context, tmp_target->second, result.target);
  }
  auto tmp_bearing = map.find("bearing");
  if (tmp_bearing != map.end()) {
    fromRawValue(context, tmp_bearing->second, result.bearing);
  }
  auto tmp_tilt = map.find("tilt");
  if (tmp_tilt != map.end()) {
    fromRawValue(context, tmp_tilt->second, result.tilt);
  }
  auto tmp_zoom = map.find("zoom");
  if (tmp_zoom != map.end()) {
    fromRawValue(context, tmp_zoom->second, result.zoom);
  }
}

static inline std::string toString(
    const NavViewInitialCameraPositionStruct &value) {
  return "[Object NavViewInitialCameraPositionStruct]";
}
class NavViewProps final : public ViewProps {
 public:
  NavViewProps() = default;
  NavViewProps(const PropsParserContext &context,
               const NavViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  int viewType{0};
  std::string nativeID{};
  std::string mapId{};
  int mapType{1};
  NavViewMapPaddingStruct mapPadding{};
  bool navigationUIEnabled{};
  bool tripProgressBarEnabled{false};
  bool trafficIncidentsCardEnabled{true};
  bool headerEnabled{true};
  bool footerEnabled{true};
  bool speedometerEnabled{true};
  bool speedLimitIconEnabled{true};
  bool recenterButtonEnabled{true};
  folly::dynamic navigationViewStylingOptions{};
  int nightMode{0};
  int followingPerspective{0};
  std::string mapStyle{};
  bool mapToolbarEnabled{true};
  bool indoorEnabled{true};
  bool trafficEnabled{false};
  bool compassEnabled{true};
  bool myLocationButtonEnabled{true};
  bool myLocationEnabled{false};
  bool rotateGesturesEnabled{true};
  bool scrollGesturesEnabled{true};
  bool scrollGesturesEnabledDuringRotateOrZoom{true};
  bool tiltGesturesEnabled{true};
  bool zoomControlsEnabled{true};
  bool zoomGesturesEnabled{true};
  bool buildingsEnabled{true};
  bool reportIncidentButtonEnabled{true};
  Float minZoomLevel{};
  Float maxZoomLevel{};
  NavViewInitialCameraPositionStruct initialCameraPosition{};
};

}  // namespace facebook::react
