/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleJavaSpec.js
 *
 * @nolint
 */

package com.google.maps.android.rn.navsdk;

import com.facebook.proguard.annotations.DoNotStrip;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;

public abstract class NativeNavModuleSpec extends ReactContextBaseJavaModule implements TurboModule {
  public static final String NAME = "NavModule";

  public NativeNavModuleSpec(ReactApplicationContext reactContext) {
    super(reactContext);
  }

  @Override
  public @Nonnull String getName() {
    return NAME;
  }

  protected final void emitOnNavigationReady() {
    mEventEmitterCallback.invoke("onNavigationReady");
  }

  protected final void emitOnLocationChanged(ReadableMap value) {
    mEventEmitterCallback.invoke("onLocationChanged", value);
  }

  protected final void emitOnArrival(ReadableMap value) {
    mEventEmitterCallback.invoke("onArrival", value);
  }

  protected final void emitOnRemainingTimeOrDistanceChanged() {
    mEventEmitterCallback.invoke("onRemainingTimeOrDistanceChanged");
  }

  protected final void emitOnRouteChanged() {
    mEventEmitterCallback.invoke("onRouteChanged");
  }

  protected final void emitOnReroutingRequestedByOffRoute() {
    mEventEmitterCallback.invoke("onReroutingRequestedByOffRoute");
  }

  protected final void emitOnStartGuidance() {
    mEventEmitterCallback.invoke("onStartGuidance");
  }

  protected final void emitOnTurnByTurn(ReadableMap value) {
    mEventEmitterCallback.invoke("onTurnByTurn", value);
  }

  protected final void emitOnRawLocationChanged(ReadableMap value) {
    mEventEmitterCallback.invoke("onRawLocationChanged", value);
  }

  protected final void emitOnTrafficUpdated() {
    mEventEmitterCallback.invoke("onTrafficUpdated");
  }

  protected final void emitLogDebugInfo(ReadableMap value) {
    mEventEmitterCallback.invoke("logDebugInfo", value);
  }

  @ReactMethod
  @DoNotStrip
  public abstract void initializeNavigator(ReadableMap termsAndConditionsDialogOptions, double taskRemovedBehavior, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void cleanup(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void setDestinations(ReadableArray waypoints, @Nullable ReadableMap routingOptions, @Nullable ReadableMap displayOptions, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void continueToNextDestination(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void clearDestinations(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void startGuidance(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void stopGuidance(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void setSpeedAlertOptions(@Nullable ReadableMap alertOptions, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void setAbnormalTerminatingReportingEnabled(boolean enabled);

  @ReactMethod
  @DoNotStrip
  public abstract void setAudioGuidanceType(double index, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void setBackgroundLocationUpdatesEnabled(boolean isEnabled);

  @ReactMethod
  @DoNotStrip
  public abstract void setTurnByTurnLoggingEnabled(boolean isEnabled);

  @ReactMethod
  @DoNotStrip
  public abstract void areTermsAccepted(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getCurrentRouteSegment(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getRouteSegments(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getCurrentTimeAndDistance(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getTraveledPath(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getNavSDKVersion(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void stopUpdatingLocation(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void startUpdatingLocation(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void simulateLocation(ReadableMap location, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void resumeLocationSimulation(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void pauseLocationSimulation(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void simulateLocationsAlongExistingRoute(ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void stopLocationSimulation(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void resetTermsAccepted();
}
