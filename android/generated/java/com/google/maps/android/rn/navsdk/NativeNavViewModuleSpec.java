/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleJavaSpec.js
 *
 * @nolint
 */

package com.google.maps.android.rn.navsdk;

import com.facebook.proguard.annotations.DoNotStrip;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;
import javax.annotation.Nonnull;

public abstract class NativeNavViewModuleSpec extends ReactContextBaseJavaModule implements TurboModule {
  public static final String NAME = "NavViewModule";

  public NativeNavViewModuleSpec(ReactApplicationContext reactContext) {
    super(reactContext);
  }

  @Override
  public @Nonnull String getName() {
    return NAME;
  }

  @ReactMethod
  @DoNotStrip
  public abstract void addCircle(double viewId, ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void addMarker(double viewId, ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void addPolyline(double viewId, ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void addPolygon(double viewId, ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void addGroundOverlay(double viewId, ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void moveCamera(double viewId, ReadableMap cameraPosition, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getCameraPosition(double viewId, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getMyLocation(double viewId, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getUiSettings(double viewId, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void isMyLocationEnabled(double viewId, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void showRouteOverview(double viewId, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void clearMapView(double viewId, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void removeMarker(double viewId, String id, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void removePolyline(double viewId, String id, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void removePolygon(double viewId, String id, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void removeCircle(double viewId, String id, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void removeGroundOverlay(double viewId, String id, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void setZoomLevel(double viewId, double level, Promise promise);
}
