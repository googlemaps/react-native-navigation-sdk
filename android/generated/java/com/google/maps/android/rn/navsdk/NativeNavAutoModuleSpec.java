/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleJavaSpec.js
 *
 * @nolint
 */

package com.google.maps.android.rn.navsdk;

import com.facebook.proguard.annotations.DoNotStrip;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;
import javax.annotation.Nonnull;

public abstract class NativeNavAutoModuleSpec extends ReactContextBaseJavaModule implements TurboModule {
  public static final String NAME = "NavAutoModule";

  public NativeNavAutoModuleSpec(ReactApplicationContext reactContext) {
    super(reactContext);
  }

  @Override
  public @Nonnull String getName() {
    return NAME;
  }

  protected final void emitOnAutoScreenAvailabilityChanged(boolean value) {
    mEventEmitterCallback.invoke("onAutoScreenAvailabilityChanged", value);
  }

  protected final void emitOnCustomNavigationAutoEvent(ReadableMap value) {
    mEventEmitterCallback.invoke("onCustomNavigationAutoEvent", value);
  }

  @ReactMethod
  @DoNotStrip
  public abstract void isAutoScreenAvailable(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void setMapType(double mapType);

  @ReactMethod
  @DoNotStrip
  public abstract void setMapStyle(String mapStyle);

  @ReactMethod
  @DoNotStrip
  public abstract void clearMapView(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void addCircle(ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void addMarker(ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void addPolyline(ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void addPolygon(ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void addGroundOverlay(ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void moveCamera(ReadableMap cameraPosition, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void removeMarker(String id, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void removePolyline(String id, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void removePolygon(String id, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void removeCircle(String id, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void removeGroundOverlay(String id, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void setIndoorEnabled(boolean isOn);

  @ReactMethod
  @DoNotStrip
  public abstract void setTrafficEnabled(boolean isOn);

  @ReactMethod
  @DoNotStrip
  public abstract void setCompassEnabled(boolean isOn);

  @ReactMethod
  @DoNotStrip
  public abstract void setMyLocationEnabled(boolean isOn);

  @ReactMethod
  @DoNotStrip
  public abstract void setBuildingsEnabled(boolean isOn);

  @ReactMethod
  @DoNotStrip
  public abstract void setZoomLevel(double zoomLevel, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void setMapPadding(double top, double left, double bottom, double right);

  @ReactMethod
  @DoNotStrip
  public abstract void getCameraPosition(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getMyLocation(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getUiSettings(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void isMyLocationEnabled(Promise promise);
}
