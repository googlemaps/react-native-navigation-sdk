/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
*
* Do not edit this file as changes may cause incorrect behavior and will be lost
* once the code is regenerated.
*
* @generated by codegen project: GeneratePropsJavaDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import androidx.annotation.Nullable;
import com.facebook.react.bridge.DynamicFromObject;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.BaseViewManager;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.LayoutShadowNode;

public class NavViewManagerDelegate<T extends View, U extends BaseViewManager<T, ? extends LayoutShadowNode> & NavViewManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
  public NavViewManagerDelegate(U viewManager) {
    super(viewManager);
  }
  @Override
  public void setProperty(T view, String propName, @Nullable Object value) {
    switch (propName) {
      case "viewType":
        mViewManager.setViewType(view, value == null ? 0 : ((Double) value).intValue());
        break;
      case "nativeID":
        mViewManager.setNativeID(view, value == null ? null : (String) value);
        break;
      case "mapId":
        mViewManager.setMapId(view, value == null ? null : (String) value);
        break;
      case "mapType":
        mViewManager.setMapType(view, value == null ? 1 : ((Double) value).intValue());
        break;
      case "mapPadding":
        mViewManager.setMapPadding(view, (ReadableMap) value);
        break;
      case "navigationUIEnabled":
        mViewManager.setNavigationUIEnabled(view, value == null ? null : (Boolean) value);
        break;
      case "tripProgressBarEnabled":
        mViewManager.setTripProgressBarEnabled(view, value == null ? false : (boolean) value);
        break;
      case "trafficIncidentsCardEnabled":
        mViewManager.setTrafficIncidentsCardEnabled(view, value == null ? true : (boolean) value);
        break;
      case "headerEnabled":
        mViewManager.setHeaderEnabled(view, value == null ? true : (boolean) value);
        break;
      case "footerEnabled":
        mViewManager.setFooterEnabled(view, value == null ? true : (boolean) value);
        break;
      case "speedometerEnabled":
        mViewManager.setSpeedometerEnabled(view, value == null ? true : (boolean) value);
        break;
      case "speedLimitIconEnabled":
        mViewManager.setSpeedLimitIconEnabled(view, value == null ? true : (boolean) value);
        break;
      case "recenterButtonEnabled":
        mViewManager.setRecenterButtonEnabled(view, value == null ? true : (boolean) value);
        break;
      case "navigationViewStylingOptions":
        mViewManager.setNavigationViewStylingOptions(view, new DynamicFromObject(value));
        break;
      case "nightMode":
        mViewManager.setNightMode(view, value == null ? 0 : ((Double) value).intValue());
        break;
      case "followingPerspective":
        mViewManager.setFollowingPerspective(view, value == null ? 0 : ((Double) value).intValue());
        break;
      case "mapStyle":
        mViewManager.setMapStyle(view, value == null ? null : (String) value);
        break;
      case "mapToolbarEnabled":
        mViewManager.setMapToolbarEnabled(view, value == null ? true : (boolean) value);
        break;
      case "indoorEnabled":
        mViewManager.setIndoorEnabled(view, value == null ? true : (boolean) value);
        break;
      case "trafficEnabled":
        mViewManager.setTrafficEnabled(view, value == null ? false : (boolean) value);
        break;
      case "compassEnabled":
        mViewManager.setCompassEnabled(view, value == null ? true : (boolean) value);
        break;
      case "myLocationButtonEnabled":
        mViewManager.setMyLocationButtonEnabled(view, value == null ? true : (boolean) value);
        break;
      case "myLocationEnabled":
        mViewManager.setMyLocationEnabled(view, value == null ? false : (boolean) value);
        break;
      case "rotateGesturesEnabled":
        mViewManager.setRotateGesturesEnabled(view, value == null ? true : (boolean) value);
        break;
      case "scrollGesturesEnabled":
        mViewManager.setScrollGesturesEnabled(view, value == null ? true : (boolean) value);
        break;
      case "scrollGesturesEnabledDuringRotateOrZoom":
        mViewManager.setScrollGesturesEnabledDuringRotateOrZoom(view, value == null ? true : (boolean) value);
        break;
      case "tiltGesturesEnabled":
        mViewManager.setTiltGesturesEnabled(view, value == null ? true : (boolean) value);
        break;
      case "zoomControlsEnabled":
        mViewManager.setZoomControlsEnabled(view, value == null ? true : (boolean) value);
        break;
      case "zoomGesturesEnabled":
        mViewManager.setZoomGesturesEnabled(view, value == null ? true : (boolean) value);
        break;
      case "buildingsEnabled":
        mViewManager.setBuildingsEnabled(view, value == null ? true : (boolean) value);
        break;
      case "reportIncidentButtonEnabled":
        mViewManager.setReportIncidentButtonEnabled(view, value == null ? true : (boolean) value);
        break;
      case "minZoomLevel":
        mViewManager.setMinZoomLevel(view, value == null ? null : ((Double) value).floatValue());
        break;
      case "maxZoomLevel":
        mViewManager.setMaxZoomLevel(view, value == null ? null : ((Double) value).floatValue());
        break;
      case "initialCameraPosition":
        mViewManager.setInitialCameraPosition(view, (ReadableMap) value);
        break;
      default:
        super.setProperty(view, propName, value);
    }
  }
}
