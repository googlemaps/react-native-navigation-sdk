/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
*
* Do not edit this file as changes may cause incorrect behavior and will be lost
* once the code is regenerated.
*
* @generated by codegen project: GeneratePropsJavaInterface.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import androidx.annotation.Nullable;
import com.facebook.react.bridge.Dynamic;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.ViewManagerWithGeneratedInterface;

public interface NavViewManagerInterface<T extends View> extends ViewManagerWithGeneratedInterface {
  void setViewType(T view, int value);
  void setNativeID(T view, @Nullable String value);
  void setMapId(T view, @Nullable String value);
  void setMapType(T view, int value);
  void setMapPadding(T view, @Nullable ReadableMap value);
  void setNavigationUIEnabled(T view, @Nullable Boolean value);
  void setTripProgressBarEnabled(T view, boolean value);
  void setTrafficIncidentCardsEnabled(T view, boolean value);
  void setHeaderEnabled(T view, boolean value);
  void setFooterEnabled(T view, boolean value);
  void setSpeedometerEnabled(T view, boolean value);
  void setSpeedLimitIconEnabled(T view, boolean value);
  void setRecenterButtonEnabled(T view, boolean value);
  void setNavigationViewStylingOptions(T view, Dynamic value);
  void setNightMode(T view, int value);
  void setFollowingPerspective(T view, int value);
  void setMapStyle(T view, @Nullable String value);
  void setMapToolbarEnabled(T view, boolean value);
  void setIndoorEnabled(T view, boolean value);
  void setTrafficEnabled(T view, boolean value);
  void setCompassEnabled(T view, boolean value);
  void setMyLocationButtonEnabled(T view, boolean value);
  void setMyLocationEnabled(T view, boolean value);
  void setRotateGesturesEnabled(T view, boolean value);
  void setScrollGesturesEnabled(T view, boolean value);
  void setScrollGesturesEnabledDuringRotateOrZoom(T view, boolean value);
  void setTiltGesturesEnabled(T view, boolean value);
  void setZoomControlsEnabled(T view, boolean value);
  void setZoomGesturesEnabled(T view, boolean value);
  void setBuildingsEnabled(T view, boolean value);
  void setReportIncidentButtonEnabled(T view, boolean value);
  void setMinZoomLevel(T view, @Nullable Float value);
  void setMaxZoomLevel(T view, @Nullable Float value);
  void setInitialCameraPosition(T view, @Nullable ReadableMap value);
}
