// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleJniCpp.js
 */

#include "RNNavigationSdkSpec.h"

namespace facebook::react {

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_isAutoScreenAvailable(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "isAutoScreenAvailable", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_setMapType(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setMapType", "(D)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_setMapStyle(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setMapStyle", "(Ljava/lang/String;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_clearMapView(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "clearMapView", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_addCircle(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "addCircle", "(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_addMarker(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "addMarker", "(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_addPolyline(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "addPolyline", "(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_addPolygon(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "addPolygon", "(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_addGroundOverlay(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "addGroundOverlay", "(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_moveCamera(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "moveCamera", "(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_removeMarker(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "removeMarker", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_removePolyline(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "removePolyline", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_removePolygon(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "removePolygon", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_removeCircle(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "removeCircle", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_removeGroundOverlay(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "removeGroundOverlay", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_setIndoorEnabled(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setIndoorEnabled", "(Z)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_setTrafficEnabled(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setTrafficEnabled", "(Z)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_setCompassEnabled(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setCompassEnabled", "(Z)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_setMyLocationEnabled(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setMyLocationEnabled", "(Z)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_setBuildingsEnabled(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setBuildingsEnabled", "(Z)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_setZoomLevel(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "setZoomLevel", "(DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_setMapPadding(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setMapPadding", "(DDDD)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_getCameraPosition(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getCameraPosition", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_getMyLocation(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getMyLocation", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_getUiSettings(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getUiSettings", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavAutoModuleSpecJSI_isMyLocationEnabled(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "isMyLocationEnabled", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

NativeNavAutoModuleSpecJSI::NativeNavAutoModuleSpecJSI(const JavaTurboModule::InitParams &params)
  : JavaTurboModule(params) {
  methodMap_["isAutoScreenAvailable"] = MethodMetadata {0, __hostFunction_NativeNavAutoModuleSpecJSI_isAutoScreenAvailable};
  methodMap_["setMapType"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleSpecJSI_setMapType};
  methodMap_["setMapStyle"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleSpecJSI_setMapStyle};
  methodMap_["clearMapView"] = MethodMetadata {0, __hostFunction_NativeNavAutoModuleSpecJSI_clearMapView};
  methodMap_["addCircle"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleSpecJSI_addCircle};
  methodMap_["addMarker"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleSpecJSI_addMarker};
  methodMap_["addPolyline"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleSpecJSI_addPolyline};
  methodMap_["addPolygon"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleSpecJSI_addPolygon};
  methodMap_["addGroundOverlay"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleSpecJSI_addGroundOverlay};
  methodMap_["moveCamera"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleSpecJSI_moveCamera};
  methodMap_["removeMarker"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleSpecJSI_removeMarker};
  methodMap_["removePolyline"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleSpecJSI_removePolyline};
  methodMap_["removePolygon"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleSpecJSI_removePolygon};
  methodMap_["removeCircle"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleSpecJSI_removeCircle};
  methodMap_["removeGroundOverlay"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleSpecJSI_removeGroundOverlay};
  methodMap_["setIndoorEnabled"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleSpecJSI_setIndoorEnabled};
  methodMap_["setTrafficEnabled"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleSpecJSI_setTrafficEnabled};
  methodMap_["setCompassEnabled"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleSpecJSI_setCompassEnabled};
  methodMap_["setMyLocationEnabled"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleSpecJSI_setMyLocationEnabled};
  methodMap_["setBuildingsEnabled"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleSpecJSI_setBuildingsEnabled};
  methodMap_["setZoomLevel"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleSpecJSI_setZoomLevel};
  methodMap_["setMapPadding"] = MethodMetadata {4, __hostFunction_NativeNavAutoModuleSpecJSI_setMapPadding};
  methodMap_["getCameraPosition"] = MethodMetadata {0, __hostFunction_NativeNavAutoModuleSpecJSI_getCameraPosition};
  methodMap_["getMyLocation"] = MethodMetadata {0, __hostFunction_NativeNavAutoModuleSpecJSI_getMyLocation};
  methodMap_["getUiSettings"] = MethodMetadata {0, __hostFunction_NativeNavAutoModuleSpecJSI_getUiSettings};
  methodMap_["isMyLocationEnabled"] = MethodMetadata {0, __hostFunction_NativeNavAutoModuleSpecJSI_isMyLocationEnabled};
  eventEmitterMap_["onAutoScreenAvailabilityChanged"] = std::make_shared<AsyncEventEmitter<folly::dynamic>>();
  eventEmitterMap_["onCustomNavigationAutoEvent"] = std::make_shared<AsyncEventEmitter<folly::dynamic>>();
  setEventEmitterCallback(params.instance);
}
static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_initializeNavigator(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "initializeNavigator", "(Lcom/facebook/react/bridge/ReadableMap;DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_cleanup(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "cleanup", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_setDestinations(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "setDestinations", "(Lcom/facebook/react/bridge/ReadableArray;Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_continueToNextDestination(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "continueToNextDestination", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_clearDestinations(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "clearDestinations", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_startGuidance(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "startGuidance", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_stopGuidance(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "stopGuidance", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_setSpeedAlertOptions(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "setSpeedAlertOptions", "(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_setAbnormalTerminatingReportingEnabled(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setAbnormalTerminatingReportingEnabled", "(Z)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_setAudioGuidanceType(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "setAudioGuidanceType", "(DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_setBackgroundLocationUpdatesEnabled(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setBackgroundLocationUpdatesEnabled", "(Z)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_setTurnByTurnLoggingEnabled(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setTurnByTurnLoggingEnabled", "(Z)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_areTermsAccepted(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "areTermsAccepted", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_getCurrentRouteSegment(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getCurrentRouteSegment", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_getRouteSegments(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getRouteSegments", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_getCurrentTimeAndDistance(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getCurrentTimeAndDistance", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_getTraveledPath(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getTraveledPath", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_getNavSDKVersion(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getNavSDKVersion", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_stopUpdatingLocation(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "stopUpdatingLocation", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_startUpdatingLocation(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "startUpdatingLocation", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_simulateLocation(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "simulateLocation", "(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_resumeLocationSimulation(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "resumeLocationSimulation", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_pauseLocationSimulation(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "pauseLocationSimulation", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_simulateLocationsAlongExistingRoute(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "simulateLocationsAlongExistingRoute", "(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_stopLocationSimulation(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "stopLocationSimulation", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavModuleSpecJSI_resetTermsAccepted(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "resetTermsAccepted", "()V", args, count, cachedMethodId);
}

NativeNavModuleSpecJSI::NativeNavModuleSpecJSI(const JavaTurboModule::InitParams &params)
  : JavaTurboModule(params) {
  methodMap_["initializeNavigator"] = MethodMetadata {2, __hostFunction_NativeNavModuleSpecJSI_initializeNavigator};
  methodMap_["cleanup"] = MethodMetadata {0, __hostFunction_NativeNavModuleSpecJSI_cleanup};
  methodMap_["setDestinations"] = MethodMetadata {3, __hostFunction_NativeNavModuleSpecJSI_setDestinations};
  methodMap_["continueToNextDestination"] = MethodMetadata {0, __hostFunction_NativeNavModuleSpecJSI_continueToNextDestination};
  methodMap_["clearDestinations"] = MethodMetadata {0, __hostFunction_NativeNavModuleSpecJSI_clearDestinations};
  methodMap_["startGuidance"] = MethodMetadata {0, __hostFunction_NativeNavModuleSpecJSI_startGuidance};
  methodMap_["stopGuidance"] = MethodMetadata {0, __hostFunction_NativeNavModuleSpecJSI_stopGuidance};
  methodMap_["setSpeedAlertOptions"] = MethodMetadata {1, __hostFunction_NativeNavModuleSpecJSI_setSpeedAlertOptions};
  methodMap_["setAbnormalTerminatingReportingEnabled"] = MethodMetadata {1, __hostFunction_NativeNavModuleSpecJSI_setAbnormalTerminatingReportingEnabled};
  methodMap_["setAudioGuidanceType"] = MethodMetadata {1, __hostFunction_NativeNavModuleSpecJSI_setAudioGuidanceType};
  methodMap_["setBackgroundLocationUpdatesEnabled"] = MethodMetadata {1, __hostFunction_NativeNavModuleSpecJSI_setBackgroundLocationUpdatesEnabled};
  methodMap_["setTurnByTurnLoggingEnabled"] = MethodMetadata {1, __hostFunction_NativeNavModuleSpecJSI_setTurnByTurnLoggingEnabled};
  methodMap_["areTermsAccepted"] = MethodMetadata {0, __hostFunction_NativeNavModuleSpecJSI_areTermsAccepted};
  methodMap_["getCurrentRouteSegment"] = MethodMetadata {0, __hostFunction_NativeNavModuleSpecJSI_getCurrentRouteSegment};
  methodMap_["getRouteSegments"] = MethodMetadata {0, __hostFunction_NativeNavModuleSpecJSI_getRouteSegments};
  methodMap_["getCurrentTimeAndDistance"] = MethodMetadata {0, __hostFunction_NativeNavModuleSpecJSI_getCurrentTimeAndDistance};
  methodMap_["getTraveledPath"] = MethodMetadata {0, __hostFunction_NativeNavModuleSpecJSI_getTraveledPath};
  methodMap_["getNavSDKVersion"] = MethodMetadata {0, __hostFunction_NativeNavModuleSpecJSI_getNavSDKVersion};
  methodMap_["stopUpdatingLocation"] = MethodMetadata {0, __hostFunction_NativeNavModuleSpecJSI_stopUpdatingLocation};
  methodMap_["startUpdatingLocation"] = MethodMetadata {0, __hostFunction_NativeNavModuleSpecJSI_startUpdatingLocation};
  methodMap_["simulateLocation"] = MethodMetadata {1, __hostFunction_NativeNavModuleSpecJSI_simulateLocation};
  methodMap_["resumeLocationSimulation"] = MethodMetadata {0, __hostFunction_NativeNavModuleSpecJSI_resumeLocationSimulation};
  methodMap_["pauseLocationSimulation"] = MethodMetadata {0, __hostFunction_NativeNavModuleSpecJSI_pauseLocationSimulation};
  methodMap_["simulateLocationsAlongExistingRoute"] = MethodMetadata {1, __hostFunction_NativeNavModuleSpecJSI_simulateLocationsAlongExistingRoute};
  methodMap_["stopLocationSimulation"] = MethodMetadata {0, __hostFunction_NativeNavModuleSpecJSI_stopLocationSimulation};
  methodMap_["resetTermsAccepted"] = MethodMetadata {0, __hostFunction_NativeNavModuleSpecJSI_resetTermsAccepted};
  eventEmitterMap_["onNavigationReady"] = std::make_shared<AsyncEventEmitter<folly::dynamic>>();
  eventEmitterMap_["onLocationChanged"] = std::make_shared<AsyncEventEmitter<folly::dynamic>>();
  eventEmitterMap_["onArrival"] = std::make_shared<AsyncEventEmitter<folly::dynamic>>();
  eventEmitterMap_["onRemainingTimeOrDistanceChanged"] = std::make_shared<AsyncEventEmitter<folly::dynamic>>();
  eventEmitterMap_["onRouteChanged"] = std::make_shared<AsyncEventEmitter<folly::dynamic>>();
  eventEmitterMap_["onReroutingRequestedByOffRoute"] = std::make_shared<AsyncEventEmitter<folly::dynamic>>();
  eventEmitterMap_["onStartGuidance"] = std::make_shared<AsyncEventEmitter<folly::dynamic>>();
  eventEmitterMap_["onTurnByTurn"] = std::make_shared<AsyncEventEmitter<folly::dynamic>>();
  eventEmitterMap_["onRawLocationChanged"] = std::make_shared<AsyncEventEmitter<folly::dynamic>>();
  eventEmitterMap_["onTrafficUpdated"] = std::make_shared<AsyncEventEmitter<folly::dynamic>>();
  eventEmitterMap_["logDebugInfo"] = std::make_shared<AsyncEventEmitter<folly::dynamic>>();
  setEventEmitterCallback(params.instance);
}
static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_addCircle(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "addCircle", "(DLcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_addMarker(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "addMarker", "(DLcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_addPolyline(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "addPolyline", "(DLcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_addPolygon(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "addPolygon", "(DLcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_addGroundOverlay(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "addGroundOverlay", "(DLcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_moveCamera(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "moveCamera", "(DLcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_getCameraPosition(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getCameraPosition", "(DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_getMyLocation(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getMyLocation", "(DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_getUiSettings(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getUiSettings", "(DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_isMyLocationEnabled(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "isMyLocationEnabled", "(DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_showRouteOverview(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "showRouteOverview", "(DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_clearMapView(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "clearMapView", "(DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_removeMarker(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "removeMarker", "(DLjava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_removePolyline(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "removePolyline", "(DLjava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_removePolygon(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "removePolygon", "(DLjava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_removeCircle(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "removeCircle", "(DLjava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_removeGroundOverlay(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "removeGroundOverlay", "(DLjava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeNavViewModuleSpecJSI_setZoomLevel(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "setZoomLevel", "(DDLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

NativeNavViewModuleSpecJSI::NativeNavViewModuleSpecJSI(const JavaTurboModule::InitParams &params)
  : JavaTurboModule(params) {
  methodMap_["addCircle"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleSpecJSI_addCircle};
  methodMap_["addMarker"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleSpecJSI_addMarker};
  methodMap_["addPolyline"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleSpecJSI_addPolyline};
  methodMap_["addPolygon"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleSpecJSI_addPolygon};
  methodMap_["addGroundOverlay"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleSpecJSI_addGroundOverlay};
  methodMap_["moveCamera"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleSpecJSI_moveCamera};
  methodMap_["getCameraPosition"] = MethodMetadata {1, __hostFunction_NativeNavViewModuleSpecJSI_getCameraPosition};
  methodMap_["getMyLocation"] = MethodMetadata {1, __hostFunction_NativeNavViewModuleSpecJSI_getMyLocation};
  methodMap_["getUiSettings"] = MethodMetadata {1, __hostFunction_NativeNavViewModuleSpecJSI_getUiSettings};
  methodMap_["isMyLocationEnabled"] = MethodMetadata {1, __hostFunction_NativeNavViewModuleSpecJSI_isMyLocationEnabled};
  methodMap_["showRouteOverview"] = MethodMetadata {1, __hostFunction_NativeNavViewModuleSpecJSI_showRouteOverview};
  methodMap_["clearMapView"] = MethodMetadata {1, __hostFunction_NativeNavViewModuleSpecJSI_clearMapView};
  methodMap_["removeMarker"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleSpecJSI_removeMarker};
  methodMap_["removePolyline"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleSpecJSI_removePolyline};
  methodMap_["removePolygon"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleSpecJSI_removePolygon};
  methodMap_["removeCircle"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleSpecJSI_removeCircle};
  methodMap_["removeGroundOverlay"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleSpecJSI_removeGroundOverlay};
  methodMap_["setZoomLevel"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleSpecJSI_setZoomLevel};
}

std::shared_ptr<TurboModule> RNNavigationSdkSpec_ModuleProvider(const std::string &moduleName, const JavaTurboModule::InitParams &params) {
  if (moduleName == "NavAutoModule") {
    return std::make_shared<NativeNavAutoModuleSpecJSI>(params);
  }
  if (moduleName == "NavModule") {
    return std::make_shared<NativeNavModuleSpecJSI>(params);
  }
  if (moduleName == "NavViewModule") {
    return std::make_shared<NativeNavViewModuleSpecJSI>(params);
  }
  return nullptr;
}

} // namespace facebook::react
