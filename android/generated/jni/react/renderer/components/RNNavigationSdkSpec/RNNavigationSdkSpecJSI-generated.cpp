// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleCpp.js
 */

#include "RNNavigationSdkSpecJSI.h"

namespace facebook::react {

static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_isAutoScreenAvailable(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->isAutoScreenAvailable(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_setMapType(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->setMapType(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_setMapStyle(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->setMapStyle(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_clearMapView(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->clearMapView(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_addCircle(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->addCircle(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_addMarker(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->addMarker(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_addPolyline(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->addPolyline(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_addPolygon(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->addPolygon(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_addGroundOverlay(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->addGroundOverlay(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_moveCamera(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->moveCamera(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_removeMarker(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->removeMarker(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_removePolyline(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->removePolyline(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_removePolygon(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->removePolygon(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_removeCircle(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->removeCircle(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_removeGroundOverlay(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->removeGroundOverlay(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_setIndoorEnabled(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->setIndoorEnabled(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_setTrafficEnabled(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->setTrafficEnabled(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_setCompassEnabled(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->setCompassEnabled(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_setMyLocationEnabled(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->setMyLocationEnabled(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_setBuildingsEnabled(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->setBuildingsEnabled(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_setZoomLevel(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->setZoomLevel(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_setMapPadding(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->setMapPadding(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber(),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber(),
    count <= 3 ? throw jsi::JSError(rt, "Expected argument in position 3 to be passed") : args[3].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_getCameraPosition(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->getCameraPosition(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_getMyLocation(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->getMyLocation(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_getUiSettings(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->getUiSettings(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavAutoModuleCxxSpecJSI_isMyLocationEnabled(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavAutoModuleCxxSpecJSI *>(&turboModule)->isMyLocationEnabled(
    rt
  );
}

NativeNavAutoModuleCxxSpecJSI::NativeNavAutoModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("NavAutoModule", jsInvoker) {
  methodMap_["isAutoScreenAvailable"] = MethodMetadata {0, __hostFunction_NativeNavAutoModuleCxxSpecJSI_isAutoScreenAvailable};
  methodMap_["setMapType"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleCxxSpecJSI_setMapType};
  methodMap_["setMapStyle"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleCxxSpecJSI_setMapStyle};
  methodMap_["clearMapView"] = MethodMetadata {0, __hostFunction_NativeNavAutoModuleCxxSpecJSI_clearMapView};
  methodMap_["addCircle"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleCxxSpecJSI_addCircle};
  methodMap_["addMarker"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleCxxSpecJSI_addMarker};
  methodMap_["addPolyline"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleCxxSpecJSI_addPolyline};
  methodMap_["addPolygon"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleCxxSpecJSI_addPolygon};
  methodMap_["addGroundOverlay"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleCxxSpecJSI_addGroundOverlay};
  methodMap_["moveCamera"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleCxxSpecJSI_moveCamera};
  methodMap_["removeMarker"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleCxxSpecJSI_removeMarker};
  methodMap_["removePolyline"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleCxxSpecJSI_removePolyline};
  methodMap_["removePolygon"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleCxxSpecJSI_removePolygon};
  methodMap_["removeCircle"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleCxxSpecJSI_removeCircle};
  methodMap_["removeGroundOverlay"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleCxxSpecJSI_removeGroundOverlay};
  methodMap_["setIndoorEnabled"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleCxxSpecJSI_setIndoorEnabled};
  methodMap_["setTrafficEnabled"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleCxxSpecJSI_setTrafficEnabled};
  methodMap_["setCompassEnabled"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleCxxSpecJSI_setCompassEnabled};
  methodMap_["setMyLocationEnabled"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleCxxSpecJSI_setMyLocationEnabled};
  methodMap_["setBuildingsEnabled"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleCxxSpecJSI_setBuildingsEnabled};
  methodMap_["setZoomLevel"] = MethodMetadata {1, __hostFunction_NativeNavAutoModuleCxxSpecJSI_setZoomLevel};
  methodMap_["setMapPadding"] = MethodMetadata {4, __hostFunction_NativeNavAutoModuleCxxSpecJSI_setMapPadding};
  methodMap_["getCameraPosition"] = MethodMetadata {0, __hostFunction_NativeNavAutoModuleCxxSpecJSI_getCameraPosition};
  methodMap_["getMyLocation"] = MethodMetadata {0, __hostFunction_NativeNavAutoModuleCxxSpecJSI_getMyLocation};
  methodMap_["getUiSettings"] = MethodMetadata {0, __hostFunction_NativeNavAutoModuleCxxSpecJSI_getUiSettings};
  methodMap_["isMyLocationEnabled"] = MethodMetadata {0, __hostFunction_NativeNavAutoModuleCxxSpecJSI_isMyLocationEnabled};
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_initializeNavigator(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->initializeNavigator(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber()
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_cleanup(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->cleanup(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_setDestinations(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->setDestinations(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt).asArray(rt),
    count <= 1 || args[1].isUndefined() ? std::nullopt : std::make_optional(args[1].asObject(rt)),
    count <= 2 || args[2].isUndefined() ? std::nullopt : std::make_optional(args[2].asObject(rt))
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_continueToNextDestination(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->continueToNextDestination(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_clearDestinations(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->clearDestinations(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_startGuidance(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->startGuidance(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_stopGuidance(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->stopGuidance(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_setSpeedAlertOptions(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->setSpeedAlertOptions(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asObject(rt))
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_setAbnormalTerminatingReportingEnabled(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->setAbnormalTerminatingReportingEnabled(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_setAudioGuidanceType(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->setAudioGuidanceType(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_setBackgroundLocationUpdatesEnabled(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->setBackgroundLocationUpdatesEnabled(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_setTurnByTurnLoggingEnabled(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->setTurnByTurnLoggingEnabled(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_areTermsAccepted(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->areTermsAccepted(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_getCurrentRouteSegment(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->getCurrentRouteSegment(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_getRouteSegments(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->getRouteSegments(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_getCurrentTimeAndDistance(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->getCurrentTimeAndDistance(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_getTraveledPath(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->getTraveledPath(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_getNavSDKVersion(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->getNavSDKVersion(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_stopUpdatingLocation(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->stopUpdatingLocation(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_startUpdatingLocation(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->startUpdatingLocation(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_simulateLocation(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->simulateLocation(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_resumeLocationSimulation(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->resumeLocationSimulation(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_pauseLocationSimulation(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->pauseLocationSimulation(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_simulateLocationsAlongExistingRoute(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->simulateLocationsAlongExistingRoute(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_stopLocationSimulation(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->stopLocationSimulation(
    rt
  );
}
static jsi::Value __hostFunction_NativeNavModuleCxxSpecJSI_resetTermsAccepted(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeNavModuleCxxSpecJSI *>(&turboModule)->resetTermsAccepted(
    rt
  );
  return jsi::Value::undefined();
}

NativeNavModuleCxxSpecJSI::NativeNavModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("NavModule", jsInvoker) {
  methodMap_["initializeNavigator"] = MethodMetadata {2, __hostFunction_NativeNavModuleCxxSpecJSI_initializeNavigator};
  methodMap_["cleanup"] = MethodMetadata {0, __hostFunction_NativeNavModuleCxxSpecJSI_cleanup};
  methodMap_["setDestinations"] = MethodMetadata {3, __hostFunction_NativeNavModuleCxxSpecJSI_setDestinations};
  methodMap_["continueToNextDestination"] = MethodMetadata {0, __hostFunction_NativeNavModuleCxxSpecJSI_continueToNextDestination};
  methodMap_["clearDestinations"] = MethodMetadata {0, __hostFunction_NativeNavModuleCxxSpecJSI_clearDestinations};
  methodMap_["startGuidance"] = MethodMetadata {0, __hostFunction_NativeNavModuleCxxSpecJSI_startGuidance};
  methodMap_["stopGuidance"] = MethodMetadata {0, __hostFunction_NativeNavModuleCxxSpecJSI_stopGuidance};
  methodMap_["setSpeedAlertOptions"] = MethodMetadata {1, __hostFunction_NativeNavModuleCxxSpecJSI_setSpeedAlertOptions};
  methodMap_["setAbnormalTerminatingReportingEnabled"] = MethodMetadata {1, __hostFunction_NativeNavModuleCxxSpecJSI_setAbnormalTerminatingReportingEnabled};
  methodMap_["setAudioGuidanceType"] = MethodMetadata {1, __hostFunction_NativeNavModuleCxxSpecJSI_setAudioGuidanceType};
  methodMap_["setBackgroundLocationUpdatesEnabled"] = MethodMetadata {1, __hostFunction_NativeNavModuleCxxSpecJSI_setBackgroundLocationUpdatesEnabled};
  methodMap_["setTurnByTurnLoggingEnabled"] = MethodMetadata {1, __hostFunction_NativeNavModuleCxxSpecJSI_setTurnByTurnLoggingEnabled};
  methodMap_["areTermsAccepted"] = MethodMetadata {0, __hostFunction_NativeNavModuleCxxSpecJSI_areTermsAccepted};
  methodMap_["getCurrentRouteSegment"] = MethodMetadata {0, __hostFunction_NativeNavModuleCxxSpecJSI_getCurrentRouteSegment};
  methodMap_["getRouteSegments"] = MethodMetadata {0, __hostFunction_NativeNavModuleCxxSpecJSI_getRouteSegments};
  methodMap_["getCurrentTimeAndDistance"] = MethodMetadata {0, __hostFunction_NativeNavModuleCxxSpecJSI_getCurrentTimeAndDistance};
  methodMap_["getTraveledPath"] = MethodMetadata {0, __hostFunction_NativeNavModuleCxxSpecJSI_getTraveledPath};
  methodMap_["getNavSDKVersion"] = MethodMetadata {0, __hostFunction_NativeNavModuleCxxSpecJSI_getNavSDKVersion};
  methodMap_["stopUpdatingLocation"] = MethodMetadata {0, __hostFunction_NativeNavModuleCxxSpecJSI_stopUpdatingLocation};
  methodMap_["startUpdatingLocation"] = MethodMetadata {0, __hostFunction_NativeNavModuleCxxSpecJSI_startUpdatingLocation};
  methodMap_["simulateLocation"] = MethodMetadata {1, __hostFunction_NativeNavModuleCxxSpecJSI_simulateLocation};
  methodMap_["resumeLocationSimulation"] = MethodMetadata {0, __hostFunction_NativeNavModuleCxxSpecJSI_resumeLocationSimulation};
  methodMap_["pauseLocationSimulation"] = MethodMetadata {0, __hostFunction_NativeNavModuleCxxSpecJSI_pauseLocationSimulation};
  methodMap_["simulateLocationsAlongExistingRoute"] = MethodMetadata {1, __hostFunction_NativeNavModuleCxxSpecJSI_simulateLocationsAlongExistingRoute};
  methodMap_["stopLocationSimulation"] = MethodMetadata {0, __hostFunction_NativeNavModuleCxxSpecJSI_stopLocationSimulation};
  methodMap_["resetTermsAccepted"] = MethodMetadata {0, __hostFunction_NativeNavModuleCxxSpecJSI_resetTermsAccepted};
}
static jsi::Value __hostFunction_NativeNavViewModuleCxxSpecJSI_addCircle(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavViewModuleCxxSpecJSI *>(&turboModule)->addCircle(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeNavViewModuleCxxSpecJSI_addMarker(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavViewModuleCxxSpecJSI *>(&turboModule)->addMarker(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeNavViewModuleCxxSpecJSI_addPolyline(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavViewModuleCxxSpecJSI *>(&turboModule)->addPolyline(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeNavViewModuleCxxSpecJSI_addPolygon(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavViewModuleCxxSpecJSI *>(&turboModule)->addPolygon(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeNavViewModuleCxxSpecJSI_addGroundOverlay(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavViewModuleCxxSpecJSI *>(&turboModule)->addGroundOverlay(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeNavViewModuleCxxSpecJSI_moveCamera(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavViewModuleCxxSpecJSI *>(&turboModule)->moveCamera(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeNavViewModuleCxxSpecJSI_getCameraPosition(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavViewModuleCxxSpecJSI *>(&turboModule)->getCameraPosition(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeNavViewModuleCxxSpecJSI_getMyLocation(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavViewModuleCxxSpecJSI *>(&turboModule)->getMyLocation(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeNavViewModuleCxxSpecJSI_getUiSettings(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavViewModuleCxxSpecJSI *>(&turboModule)->getUiSettings(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeNavViewModuleCxxSpecJSI_isMyLocationEnabled(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavViewModuleCxxSpecJSI *>(&turboModule)->isMyLocationEnabled(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeNavViewModuleCxxSpecJSI_showRouteOverview(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavViewModuleCxxSpecJSI *>(&turboModule)->showRouteOverview(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeNavViewModuleCxxSpecJSI_clearMapView(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavViewModuleCxxSpecJSI *>(&turboModule)->clearMapView(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeNavViewModuleCxxSpecJSI_removeMarker(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavViewModuleCxxSpecJSI *>(&turboModule)->removeMarker(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeNavViewModuleCxxSpecJSI_removePolyline(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavViewModuleCxxSpecJSI *>(&turboModule)->removePolyline(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeNavViewModuleCxxSpecJSI_removePolygon(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavViewModuleCxxSpecJSI *>(&turboModule)->removePolygon(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeNavViewModuleCxxSpecJSI_removeCircle(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavViewModuleCxxSpecJSI *>(&turboModule)->removeCircle(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeNavViewModuleCxxSpecJSI_removeGroundOverlay(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavViewModuleCxxSpecJSI *>(&turboModule)->removeGroundOverlay(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeNavViewModuleCxxSpecJSI_setZoomLevel(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeNavViewModuleCxxSpecJSI *>(&turboModule)->setZoomLevel(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber()
  );
}

NativeNavViewModuleCxxSpecJSI::NativeNavViewModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("NavViewModule", jsInvoker) {
  methodMap_["addCircle"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleCxxSpecJSI_addCircle};
  methodMap_["addMarker"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleCxxSpecJSI_addMarker};
  methodMap_["addPolyline"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleCxxSpecJSI_addPolyline};
  methodMap_["addPolygon"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleCxxSpecJSI_addPolygon};
  methodMap_["addGroundOverlay"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleCxxSpecJSI_addGroundOverlay};
  methodMap_["moveCamera"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleCxxSpecJSI_moveCamera};
  methodMap_["getCameraPosition"] = MethodMetadata {1, __hostFunction_NativeNavViewModuleCxxSpecJSI_getCameraPosition};
  methodMap_["getMyLocation"] = MethodMetadata {1, __hostFunction_NativeNavViewModuleCxxSpecJSI_getMyLocation};
  methodMap_["getUiSettings"] = MethodMetadata {1, __hostFunction_NativeNavViewModuleCxxSpecJSI_getUiSettings};
  methodMap_["isMyLocationEnabled"] = MethodMetadata {1, __hostFunction_NativeNavViewModuleCxxSpecJSI_isMyLocationEnabled};
  methodMap_["showRouteOverview"] = MethodMetadata {1, __hostFunction_NativeNavViewModuleCxxSpecJSI_showRouteOverview};
  methodMap_["clearMapView"] = MethodMetadata {1, __hostFunction_NativeNavViewModuleCxxSpecJSI_clearMapView};
  methodMap_["removeMarker"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleCxxSpecJSI_removeMarker};
  methodMap_["removePolyline"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleCxxSpecJSI_removePolyline};
  methodMap_["removePolygon"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleCxxSpecJSI_removePolygon};
  methodMap_["removeCircle"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleCxxSpecJSI_removeCircle};
  methodMap_["removeGroundOverlay"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleCxxSpecJSI_removeGroundOverlay};
  methodMap_["setZoomLevel"] = MethodMetadata {2, __hostFunction_NativeNavViewModuleCxxSpecJSI_setZoomLevel};
}


} // namespace facebook::react
